
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\004\005\000\002\004\010\000\002\004\007\000\002" +
    "\004\006\000\002\004\004\000\002\004\004\000\002\004" +
    "\007\000\002\004\004\000\002\004\007\000\002\004\007" +
    "\000\002\004\010\000\002\004\007\000\002\004\005\000" +
    "\002\004\007\000\002\004\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\007\000\002\004\011\000\002\004\005\000\002" +
    "\004\010\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\007" +
    "\000\002\004\010\000\002\004\006\000\002\004\010\000" +
    "\002\004\004\000\002\004\004\000\002\004\006\000\002" +
    "\004\007\000\002\004\005\000\002\004\007\000\002\004" +
    "\004\000\002\004\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\005\010\000\002\005\011\000\002\005\011\000\002" +
    "\005\010\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\010\010" +
    "\000\002\010\011\000\002\010\010\000\002\010\007\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\007\012\000\002\007\010\000\002\007\011\000\002\007" +
    "\011\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\006\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\011\010\000\002\011\011\000\002\011\004\000" +
    "\002\011\005\000\002\017\011\000\002\020\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\010\004\006\030\004\036\005\001\002\000" +
    "\004\031\377\001\002\000\010\002\ufffe\004\014\030\013" +
    "\001\002\000\004\030\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\031\012\001\002" +
    "\000\004\002\ufffb\001\002\000\004\031\376\001\002\000" +
    "\010\002\ufffd\030\016\031\015\001\002\000\004\002\ufff9" +
    "\001\002\000\034\002\ufffc\004\030\013\035\014\017\026" +
    "\020\031\032\037\023\040\043\043\044\044\041\045\036" +
    "\046\040\047\026\001\002\000\004\026\370\001\002\000" +
    "\014\004\142\005\136\006\143\010\144\011\141\001\002" +
    "\000\034\004\uffdf\012\uffdf\013\uffdf\014\uffdf\026\uffdf\031" +
    "\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\001\002\000\034\004\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\026\uffe5\031\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\001\002\000\012\004\347\007" +
    "\345\034\346\041\350\001\002\000\034\004\030\012\176" +
    "\013\035\014\017\026\020\031\344\037\023\040\043\043" +
    "\044\044\041\045\036\046\040\047\026\001\002\000\034" +
    "\004\ufff6\012\ufff6\013\ufff6\014\ufff6\026\ufff6\031\ufff6\037" +
    "\ufff6\040\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\001\002\000\016\004\142\005\136\006\143\010\144\011" +
    "\141\026\316\001\002\000\034\004\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\026\uffe3\031\uffe3\037\uffe3\040\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000\014\005\272" +
    "\007\274\034\275\041\276\042\273\001\002\000\034\004" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\026\ufff4\031\ufff4\037\ufff4" +
    "\040\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001" +
    "\002\000\004\002\000\001\002\000\034\004\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\026\uffe1\031\uffe1\037\uffe1\040\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\034" +
    "\004\uffe7\012\uffe7\013\uffe7\014\uffe7\026\uffe7\031\uffe7\037" +
    "\uffe7\040\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\001\002\000\004\026\264\001\002\000\006\004\232\026" +
    "\231\001\002\000\034\004\uffed\012\uffed\013\uffed\014\uffed" +
    "\026\uffed\031\uffed\037\uffed\040\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\001\002\000\016\004\142\005\136" +
    "\006\143\010\144\011\141\026\137\001\002\000\010\004" +
    "\121\034\120\041\122\001\002\000\034\004\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\026\uffeb\031\uffeb\037\uffeb\040\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002\000\010" +
    "\004\100\034\077\041\101\001\002\000\014\004\053\005" +
    "\050\034\052\041\054\042\051\001\002\000\034\004\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\026\ufff0\031\ufff0\037\ufff0\040" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002" +
    "\000\034\004\uffe9\012\uffe9\013\uffe9\014\uffe9\026\uffe9\031" +
    "\uffe9\037\uffe9\040\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\001\002\000\034\004\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\026\ufff2\031\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\001\002\000\004\042\073\001" +
    "\002\000\004\005\071\001\002\000\034\004\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\026\uffb6\031\uffb6\037\uffb6\040\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\001\002\000\040" +
    "\004\uffb7\012\uffb7\013\uffb7\014\uffb7\026\uffb7\031\uffb7\034" +
    "\061\037\uffb7\040\uffb7\041\062\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\001\002\000\004\005\055\001\002\000" +
    "\004\042\056\001\002\000\004\005\057\001\002\000\004" +
    "\034\060\001\002\000\034\004\uffba\012\uffba\013\uffba\014" +
    "\uffba\026\uffba\031\uffba\037\uffba\040\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\001\002\000\034\004\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\026\uffc2\031\uffc2\037\uffc2\040\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\001\002\000" +
    "\006\005\063\015\064\001\002\000\004\042\066\001\002" +
    "\000\004\034\065\001\002\000\034\004\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\026\uffc4\031\uffc4\037\uffc4\040\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002\000\004\005" +
    "\067\001\002\000\036\004\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\026\uffb8\031\uffb8\034\070\037\uffb8\040\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\034\004\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\026\uffc3\031\uffc3\037\uffc3\040" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\001\002" +
    "\000\004\034\072\001\002\000\034\004\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\026\uffb9\031\uffb9\037\uffb9\040\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\001\002\000\006\005" +
    "\074\034\075\001\002\000\004\034\076\001\002\000\034" +
    "\004\uffb5\012\uffb5\013\uffb5\014\uffb5\026\uffb5\031\uffb5\037" +
    "\uffb5\040\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\001\002\000\034\004\uffbb\012\uffbb\013\uffbb\014\uffbb\026" +
    "\uffbb\031\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\001\002\000\034\004\uffda\012\uffda\013" +
    "\uffda\014\uffda\026\uffda\031\uffda\037\uffda\040\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\001\002\000\040\004" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\026\uffd9\031\uffd9\034\105" +
    "\037\uffd9\040\uffd9\041\106\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\001\002\000\004\020\102\001\002\000\004" +
    "\020\103\001\002\000\004\034\104\001\002\000\034\004" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\026\uffd5\031\uffd5\037\uffd5" +
    "\040\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\001" +
    "\002\000\034\004\uffde\012\uffde\013\uffde\014\uffde\026\uffde" +
    "\031\uffde\037\uffde\040\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\001\002\000\010\015\111\020\107\034\110" +
    "\001\002\000\010\004\115\020\113\034\114\001\002\000" +
    "\034\004\uffdb\012\uffdb\013\uffdb\014\uffdb\026\uffdb\031\uffdb" +
    "\037\uffdb\040\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\001\002\000\004\034\112\001\002\000\034\004\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\026\uffdc\031\uffdc\037\uffdc\040" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\001\002" +
    "\000\004\034\117\001\002\000\034\004\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\026\uffd8\031\uffd8\037\uffd8\040\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\001\002\000\004\020" +
    "\116\001\002\000\034\004\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\026\uffd4\031\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\001\002\000\034\004\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\026\uffdd\031\uffdd\037\uffdd\040\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\034" +
    "\004\uffb0\012\uffb0\013\uffb0\014\uffb0\026\uffb0\031\uffb0\037" +
    "\uffb0\040\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\001\002\000\042\004\uffb1\006\126\012\uffb1\013\uffb1\014" +
    "\uffb1\026\uffb1\031\uffb1\034\125\037\uffb1\040\uffb1\041\127" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002\000" +
    "\004\006\123\001\002\000\004\034\124\001\002\000\034" +
    "\004\uffaf\012\uffaf\013\uffaf\014\uffaf\026\uffaf\031\uffaf\037" +
    "\uffaf\040\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\001\002\000\034\004\uffb3\012\uffb3\013\uffb3\014\uffb3\026" +
    "\uffb3\031\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\001\002\000\004\034\135\001\002\000" +
    "\042\004\uffab\006\131\012\uffab\013\uffab\014\uffab\015\132" +
    "\026\uffab\031\uffab\034\130\037\uffab\040\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\001\002\000\034\004\uffad" +
    "\012\uffad\013\uffad\014\uffad\026\uffad\031\uffad\037\uffad\040" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\001\002" +
    "\000\036\004\uffac\012\uffac\013\uffac\014\uffac\026\uffac\031" +
    "\uffac\034\134\037\uffac\040\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\001\002\000\004\034\133\001\002\000" +
    "\034\004\uffb4\012\uffb4\013\uffb4\014\uffb4\026\uffb4\031\uffb4" +
    "\037\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\001\002\000\034\004\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\026\uffb2\031\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\001\002\000\034\004\uffae\012\uffae" +
    "\013\uffae\014\uffae\026\uffae\031\uffae\037\uffae\040\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\001\002\000\006" +
    "\004\227\011\226\001\002\000\016\004\142\005\136\006" +
    "\143\010\144\011\141\027\157\001\002\000\004\027\153" +
    "\001\002\000\004\004\152\001\002\000\014\004\147\005" +
    "\145\011\146\027\uff8d\030\uff8d\001\002\000\006\027\uff92" +
    "\030\uff92\001\002\000\006\027\uff8e\030\uff8e\001\002\000" +
    "\006\027\uff8b\030\uff8b\001\002\000\012\004\151\005\150" +
    "\027\uff8c\030\uff8c\001\002\000\006\027\uff8a\030\uff8a\001" +
    "\002\000\006\027\uff91\030\uff91\001\002\000\006\027\uff90" +
    "\030\uff90\001\002\000\006\027\uff89\030\uff89\001\002\000" +
    "\004\030\154\001\002\000\004\031\155\001\002\000\034" +
    "\004\uffa6\012\uffa6\013\uffa6\014\uffa6\026\uffa6\031\uffa6\037" +
    "\uffa6\040\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\001\002\000\006\027\215\030\214\001\002\000\004\030" +
    "\160\001\002\000\032\004\030\013\035\014\017\026\020" +
    "\031\162\037\023\040\043\043\044\044\041\045\036\046" +
    "\040\047\026\001\002\000\034\004\030\012\176\013\035" +
    "\014\017\026\020\031\171\037\023\040\043\043\044\044" +
    "\041\045\036\046\040\047\026\001\002\000\034\004\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\026\uffa5\031\uffa5\037\uffa5\040" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002" +
    "\000\034\004\uffe0\012\uffe0\013\uffe0\014\uffe0\026\uffe0\031" +
    "\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\001\002\000\034\004\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\026\uffe6\031\uffe6\037\uffe6\040\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\001\002\000\034\004\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\026\ufff7\031\ufff7\037\ufff7\040\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000" +
    "\034\004\uffef\012\uffef\013\uffef\014\uffef\026\uffef\031\uffef" +
    "\037\uffef\040\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\001\002\000\034\004\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\026\uffe4\031\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\001\002\000\034\004\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\026\ufff5\031\ufff5\037\ufff5\040\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002\000\034" +
    "\004\uffa7\012\uffa7\013\uffa7\014\uffa7\026\uffa7\031\uffa7\037" +
    "\uffa7\040\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\001\002\000\034\004\uffe2\012\uffe2\013\uffe2\014\uffe2\026" +
    "\uffe2\031\uffe2\037\uffe2\040\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\001\002\000\034\004\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\026\uffe8\031\uffe8\037\uffe8\040\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001\002\000\034\004" +
    "\uffee\012\uffee\013\uffee\014\uffee\026\uffee\031\uffee\037\uffee" +
    "\040\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001" +
    "\002\000\034\004\uffec\012\uffec\013\uffec\014\uffec\026\uffec" +
    "\031\uffec\037\uffec\040\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\047\uffec\001\002\000\004\026\202\001\002\000\034" +
    "\004\ufff1\012\ufff1\013\ufff1\014\ufff1\026\ufff1\031\ufff1\037" +
    "\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\001\002\000\034\004\uffea\012\uffea\013\uffea\014\uffea\026" +
    "\uffea\031\uffea\037\uffea\040\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\001\002\000\034\004\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\026\ufff3\031\ufff3\037\ufff3\040\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002\000\040\004" +
    "\uff84\012\uff84\013\uff84\014\uff84\020\203\026\uff84\027\204" +
    "\031\uff84\037\uff84\040\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\001\002\000\006\004\206\020\205\001\002" +
    "\000\034\004\uff83\012\uff83\013\uff83\014\uff83\026\uff83\031" +
    "\uff83\037\uff83\040\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\001\002\000\004\027\212\001\002\000\004\020" +
    "\207\001\002\000\004\027\210\001\002\000\004\034\211" +
    "\001\002\000\034\004\uff85\012\uff85\013\uff85\014\uff85\026" +
    "\uff85\031\uff85\037\uff85\040\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\001\002\000\004\034\213\001\002\000" +
    "\034\004\uff86\012\uff86\013\uff86\014\uff86\026\uff86\031\uff86" +
    "\037\uff86\040\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\001\002\000\004\031\225\001\002\000\006\030\217" +
    "\031\216\001\002\000\034\004\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\026\uffa3\031\uffa3\037\uffa3\040\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\001\002\000\034\004\030\012" +
    "\176\013\035\014\017\026\020\031\222\037\023\040\043" +
    "\043\044\044\041\045\036\046\040\047\026\001\002\000" +
    "\034\004\030\012\176\013\035\014\017\026\020\031\224" +
    "\037\023\040\043\043\044\044\041\045\036\046\040\047" +
    "\026\001\002\000\004\031\223\001\002\000\034\004\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\026\uffaa\031\uffaa\037\uffaa\040" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\001\002" +
    "\000\034\004\uffa9\012\uffa9\013\uffa9\014\uffa9\026\uffa9\031" +
    "\uffa9\037\uffa9\040\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\001\002\000\034\004\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\026\uffa8\031\uffa8\037\uffa8\040\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\001\002\000\034\004\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\026\uffa4\031\uffa4\037\uffa4\040\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000" +
    "\010\004\230\027\uff87\030\uff87\001\002\000\006\027\uff88" +
    "\030\uff88\001\002\000\006\027\uff8f\030\uff8f\001\002\000" +
    "\004\027\260\001\002\000\006\026\233\027\234\001\002" +
    "\000\020\004\142\005\136\006\143\010\144\011\141\027" +
    "\242\030\240\001\002\000\004\030\235\001\002\000\030" +
    "\004\030\013\035\014\017\026\020\037\023\040\043\043" +
    "\044\044\041\045\036\046\040\047\026\001\002\000\034" +
    "\004\030\012\176\013\035\014\017\026\020\031\237\037" +
    "\023\040\043\043\044\044\041\045\036\046\040\047\026" +
    "\001\002\000\034\004\uff95\012\uff95\013\uff95\014\uff95\026" +
    "\uff95\031\uff95\037\uff95\040\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\001\002\000\030\004\030\013\035\014" +
    "\017\026\020\037\023\040\043\043\044\044\041\045\036" +
    "\046\040\047\026\001\002\000\004\027\251\001\002\000" +
    "\032\004\030\013\035\014\017\026\020\030\244\037\023" +
    "\040\043\043\044\044\041\045\036\046\040\047\026\001" +
    "\002\000\034\004\030\012\176\013\035\014\017\026\020" +
    "\031\250\037\023\040\043\043\044\044\041\045\036\046" +
    "\040\047\026\001\002\000\032\004\030\013\035\014\017" +
    "\026\020\031\246\037\023\040\043\043\044\044\041\045" +
    "\036\046\040\047\026\001\002\000\034\004\030\012\176" +
    "\013\035\014\017\026\020\031\247\037\023\040\043\043" +
    "\044\044\041\045\036\046\040\047\026\001\002\000\034" +
    "\004\uff99\012\uff99\013\uff99\014\uff99\026\uff99\031\uff99\037" +
    "\uff99\040\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\001\002\000\034\004\uff97\012\uff97\013\uff97\014\uff97\026" +
    "\uff97\031\uff97\037\uff97\040\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\001\002\000\034\004\uff93\012\uff93\013" +
    "\uff93\014\uff93\026\uff93\031\uff93\037\uff93\040\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\001\002\000\004\030" +
    "\252\001\002\000\032\004\030\013\035\014\017\026\020" +
    "\031\254\037\023\040\043\043\044\044\041\045\036\046" +
    "\040\047\026\001\002\000\034\004\030\012\176\013\035" +
    "\014\017\026\020\031\255\037\023\040\043\043\044\044" +
    "\041\045\036\046\040\047\026\001\002\000\034\004\uff98" +
    "\012\uff98\013\uff98\014\uff98\026\uff98\031\uff98\037\uff98\040" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\001\002" +
    "\000\034\004\uff9a\012\uff9a\013\uff9a\014\uff9a\026\uff9a\031" +
    "\uff9a\037\uff9a\040\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\001\002\000\034\004\030\012\176\013\035\014" +
    "\017\026\020\031\257\037\023\040\043\043\044\044\041" +
    "\045\036\046\040\047\026\001\002\000\034\004\uff94\012" +
    "\uff94\013\uff94\014\uff94\026\uff94\031\uff94\037\uff94\040\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\001\002\000" +
    "\004\030\261\001\002\000\030\004\030\013\035\014\017" +
    "\026\020\037\023\040\043\043\044\044\041\045\036\046" +
    "\040\047\026\001\002\000\034\004\030\012\176\013\035" +
    "\014\017\026\020\031\263\037\023\040\043\043\044\044" +
    "\041\045\036\046\040\047\026\001\002\000\034\004\uff96" +
    "\012\uff96\013\uff96\014\uff96\026\uff96\031\uff96\037\uff96\040" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\001\002" +
    "\000\004\020\265\001\002\000\004\004\266\001\002\000" +
    "\004\020\267\001\002\000\004\027\270\001\002\000\004" +
    "\034\271\001\002\000\034\004\uff82\012\uff82\013\uff82\014" +
    "\uff82\026\uff82\031\uff82\037\uff82\040\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\001\002\000\004\042\312\001" +
    "\002\000\006\005\307\034\310\001\002\000\034\004\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\026\uffcb\031\uffcb\037\uffcb\040" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001\002" +
    "\000\034\004\uffd7\012\uffd7\013\uffd7\014\uffd7\026\uffd7\031" +
    "\uffd7\037\uffd7\040\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\001\002\000\042\004\uffc9\005\277\012\uffc9\013" +
    "\uffc9\014\uffc9\020\300\026\uffc9\031\uffc9\034\301\037\uffc9" +
    "\040\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\001" +
    "\002\000\036\004\uffca\012\uffca\013\uffca\014\uffca\026\uffca" +
    "\031\uffca\037\uffca\040\uffca\042\304\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\001\002\000\004\020\302\001\002" +
    "\000\034\004\uffbc\012\uffbc\013\uffbc\014\uffbc\026\uffbc\031" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\001\002\000\004\034\303\001\002\000\034\004" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\026\uffd6\031\uffd6\037\uffd6" +
    "\040\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\001" +
    "\002\000\004\005\305\001\002\000\004\034\306\001\002" +
    "\000\034\004\uffc1\012\uffc1\013\uffc1\014\uffc1\026\uffc1\031" +
    "\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\001\002\000\004\034\311\001\002\000\034\004" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\026\uffbd\031\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001" +
    "\002\000\034\004\uffbf\012\uffbf\013\uffbf\014\uffbf\026\uffbf" +
    "\031\uffbf\037\uffbf\040\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\001\002\000\006\005\313\034\314\001\002" +
    "\000\004\034\315\001\002\000\034\004\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\026\uffbe\031\uffbe\037\uffbe\040\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000\034\004" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\026\uffc0\031\uffc0\037\uffc0" +
    "\040\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\001" +
    "\002\000\016\004\142\005\323\006\143\010\144\011\141" +
    "\027\325\001\002\000\004\027\320\001\002\000\004\030" +
    "\321\001\002\000\004\031\322\001\002\000\034\004\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\026\uff9e\031\uff9e\037\uff9e\040" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\001\002" +
    "\000\010\004\227\011\226\027\340\001\002\000\006\027" +
    "\335\030\334\001\002\000\004\030\326\001\002\000\034" +
    "\004\030\012\176\013\035\014\017\026\020\031\331\037" +
    "\023\040\043\043\044\044\041\045\036\046\040\047\026" +
    "\001\002\000\034\004\030\012\176\013\035\014\017\026" +
    "\020\031\333\037\023\040\043\043\044\044\041\045\036" +
    "\046\040\047\026\001\002\000\004\031\332\001\002\000" +
    "\034\004\uff9d\012\uff9d\013\uff9d\014\uff9d\026\uff9d\031\uff9d" +
    "\037\uff9d\040\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\001\002\000\034\004\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\026\uff9f\031\uff9f\037\uff9f\040\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\001\002\000\034\004\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\026\uffa1\031\uffa1\037\uffa1\040\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\001\002\000\004" +
    "\031\337\001\002\000\004\031\336\001\002\000\034\004" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\026\uff9b\031\uff9b\037\uff9b" +
    "\040\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\001" +
    "\002\000\034\004\uff9c\012\uff9c\013\uff9c\014\uff9c\026\uff9c" +
    "\031\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\001\002\000\004\030\341\001\002\000\030" +
    "\004\030\013\035\014\017\026\020\037\023\040\043\043" +
    "\044\044\041\045\036\046\040\047\026\001\002\000\034" +
    "\004\030\012\176\013\035\014\017\026\020\031\343\037" +
    "\023\040\043\043\044\044\041\045\036\046\040\047\026" +
    "\001\002\000\034\004\uffa0\012\uffa0\013\uffa0\014\uffa0\026" +
    "\uffa0\031\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\001\002\000\004\002\uffff\001\002\000" +
    "\036\004\uffcc\012\uffcc\013\uffcc\014\uffcc\026\uffcc\031\uffcc" +
    "\034\363\037\uffcc\040\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\001\002\000\034\004\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\026\uffcf\031\uffcf\037\uffcf\040\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\001\002\000\042\004\uffce" +
    "\007\353\012\uffce\013\uffce\014\uffce\026\uffce\031\uffce\034" +
    "\354\037\uffce\040\uffce\041\355\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\001\002\000\036\004\uffcd\005\351\012" +
    "\uffcd\013\uffcd\014\uffcd\026\uffcd\031\uffcd\037\uffcd\040\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000" +
    "\004\034\352\001\002\000\034\004\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\026\uffc7\031\uffc7\037\uffc7\040\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000\036\004\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\026\uffc5\031\uffc5\034\362\037" +
    "\uffc5\040\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\001\002\000\034\004\uffd2\012\uffd2\013\uffd2\014\uffd2\026" +
    "\uffd2\031\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\001\002\000\006\005\356\015\357\001" +
    "\002\000\036\004\uffc6\012\uffc6\013\uffc6\014\uffc6\026\uffc6" +
    "\031\uffc6\034\361\037\uffc6\040\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\001\002\000\004\034\360\001\002" +
    "\000\034\004\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\001\002\000\034\004\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\026\uffd1\031\uffd1\037\uffd1\040\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\001\002\000\034\004\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\026\uffd0\031\uffd0\037\uffd0\040\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000" +
    "\034\004\uffc8\012\uffc8\013\uffc8\014\uffc8\026\uffc8\031\uffc8" +
    "\037\uffc8\040\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\001\002\000\004\027\365\001\002\000\004\030\366" +
    "\001\002\000\004\031\367\001\002\000\034\004\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\026\uffa2\031\uffa2\037\uffa2\040\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000" +
    "\004\020\371\001\002\000\004\004\372\001\002\000\004" +
    "\020\373\001\002\000\004\027\374\001\002\000\004\034" +
    "\375\001\002\000\034\004\uff81\012\uff81\013\uff81\014\uff81" +
    "\026\uff81\031\uff81\037\uff81\040\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\023" +
    "\004\024\005\030\007\046\010\044\012\036\013\041\014" +
    "\045\015\033\016\021\017\026\020\032\021\020\001\001" +
    "\000\002\001\001\000\004\006\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\164" +
    "\005\167\007\200\010\176\011\165\012\173\013\174\014" +
    "\177\015\172\016\163\017\166\020\171\021\162\001\001" +
    "\000\002\001\001\000\004\006\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\160\004\024\005" +
    "\030\007\046\010\044\012\036\013\041\014\045\015\033" +
    "\016\021\017\026\020\032\021\020\001\001\000\034\004" +
    "\164\005\167\007\200\010\176\011\165\012\173\013\174" +
    "\014\177\015\172\016\163\017\166\020\171\021\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\217\004\024\005\030\007\046\010\044\011" +
    "\220\012\036\013\041\014\045\015\033\016\021\017\026" +
    "\020\032\021\020\001\001\000\034\004\164\005\167\007" +
    "\200\010\176\011\165\012\173\013\174\014\177\015\172" +
    "\016\163\017\166\020\171\021\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\240\001\001\000\002\001\001\000\034\003\235\004" +
    "\024\005\030\007\046\010\044\012\036\013\041\014\045" +
    "\015\033\016\021\017\026\020\032\021\020\001\001\000" +
    "\034\004\164\005\167\007\200\010\176\011\165\012\173" +
    "\013\174\014\177\015\172\016\163\017\166\020\171\021" +
    "\162\001\001\000\002\001\001\000\034\003\255\004\024" +
    "\005\030\007\046\010\044\012\036\013\041\014\045\015" +
    "\033\016\021\017\026\020\032\021\020\001\001\000\002" +
    "\001\001\000\034\003\242\004\024\005\030\007\046\010" +
    "\044\012\036\013\041\014\045\015\033\016\021\017\026" +
    "\020\032\021\020\001\001\000\034\004\164\005\167\007" +
    "\200\010\176\011\165\012\173\013\174\014\177\015\172" +
    "\016\163\017\166\020\171\021\162\001\001\000\034\003" +
    "\244\004\024\005\030\007\046\010\044\012\036\013\041" +
    "\014\045\015\033\016\021\017\026\020\032\021\020\001" +
    "\001\000\034\004\164\005\167\007\200\010\176\011\165" +
    "\012\173\013\174\014\177\015\172\016\163\017\166\020" +
    "\171\021\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\252\004" +
    "\024\005\030\007\046\010\044\012\036\013\041\014\045" +
    "\015\033\016\021\017\026\020\032\021\020\001\001\000" +
    "\034\004\164\005\167\007\200\010\176\011\165\012\173" +
    "\013\174\014\177\015\172\016\163\017\166\020\171\021" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\164\005\167\007\200\010\176\011\165\012\173\013" +
    "\174\014\177\015\172\016\163\017\166\020\171\021\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\261\004\024\005\030\007\046\010\044\012\036\013\041" +
    "\014\045\015\033\016\021\017\026\020\032\021\020\001" +
    "\001\000\034\004\164\005\167\007\200\010\176\011\165" +
    "\012\173\013\174\014\177\015\172\016\163\017\166\020" +
    "\171\021\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\326\004\024\005\030\007" +
    "\046\010\044\011\327\012\036\013\041\014\045\015\033" +
    "\016\021\017\026\020\032\021\020\001\001\000\034\004" +
    "\164\005\167\007\200\010\176\011\165\012\173\013\174" +
    "\014\177\015\172\016\163\017\166\020\171\021\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\341\004\024\005\030\007\046\010\044\012\036\013" +
    "\041\014\045\015\033\016\021\017\026\020\032\021\020" +
    "\001\001\000\034\004\164\005\167\007\200\010\176\011" +
    "\165\012\173\013\174\014\177\015\172\016\163\017\166" +
    "\020\171\021\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_App Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio_App Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio_App 
            {
              Object RESULT =null;
		
    Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba un identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inicio_App Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_a "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Inicio_App Identificador Llave_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera la palabra de Inicio_App antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Inicio_App Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba identificador entre Inicio_App y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Inicio_App Identificador Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Llave_a entre Indentificador y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera = 'Inicio_App Identificador' antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA IMPRIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Text Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"String",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Text Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		Generador.gc(Generador.DECLARACION,"String", null, id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Text Identificador asignacion caracter P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"String",id,text);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Text Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Text P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Text Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Text Identificador asignacion Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban un Tipo de dato antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Text antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Text asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignacion "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Text Identificador asignacion Comillas Identificador Comillas 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de las comillas "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Ent Identificador asignacion caracter P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Ent Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"int",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Ent Identificador asignacion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorIncDecleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorIncDecright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorIncDec = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,operadorIncDec);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Ent P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Ent Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion, operadorIncrementoDecremento despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Ent asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes de la asignacion y un Numero y P_Coma despuÃ©s de la misma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Ent operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes del operador y un P_coma despuÃ©s del mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del operador y un P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del Identificador y un P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Tipo de dato antes del Identificador, un Numero o Cadena despuÃ©s de la asginacion y un P_coma despuÃ©s del Mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Ent operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Ent asignacion Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Ent Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Real Identificador asignacion caracter P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Real Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Numero1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Numero1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String Numero1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Numero2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Numero2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String Numero2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"float",Numero1+"."+Numero2,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Real Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"float",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Identificador Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Identificador punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Identificador Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Identificador punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y Numeros antes y despuÃ©s de punto"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Tipo de dato antes del Identificador y Variables despuÃ©s de la asignaciÃ³n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Real Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador y asignacion antes de Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Real asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignaciÃ³n "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Real punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Real Identificador asignacion Numero punto Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Ãºltimo Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Real Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Real P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Real Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Bool Identificador asignacion caracter P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"boolean",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Bool Identificador asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"boolean",operador,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Bool asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de asignacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Bool Identificador operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta asignacion antes de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Bool Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Bool Identificador asignacion operadorBooleano 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Bool Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano y P_coma despuÃ©s de asginacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a IMPRIME Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF ::= Y_si Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF ::= Y_si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF ::= Y_si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Y_si o Mientras antes de parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MIENTRAS ::= Mientras Parentesis_a Numero Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a IMPRIME Llave_c 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MIENTRAS ::= Mientras SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TAREA ::= Tarea Identificador Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TAREA ::= Tarea Identificador Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TAREA ::= Tarea Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TAREA ::= Tarea Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TAREA ::= Tarea Identificador Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de la Sentencia"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= operadorBooleano 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,operador,"-","-");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id,operadorRelacional,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id1,operadorRelacional,id2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional Identificador 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,numero,operadorRelacional,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= operadorLogico 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de operadorLogico"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operador despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Numero o Segundo Identificador despuÃ©s de operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BOOLEANA ::= Identificador Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_BOOLEANA ::= Identificador Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_BOOLEANA ::= operadorRelacional Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Numero antes del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_BOOLEANA ::= Numero Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional despuÃ©s del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Identificador despuÃ©s del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IMPRIME ::= Imprime Parentesis_a Comillas Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		Generador.mensaje(Generador.Imprime,Reservada,"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IMPRIME ::= Imprime Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.mensaje(Generador.Imprime,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IMPRIME ::= Imprime Parentesis_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c P_coma despuÃ©s de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IMPRIME ::= Imprime Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_AVISO ::= Aviso Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.sen(Generador.SENAV,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_AVISO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_ADVERTENCIA ::= Advertencia Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.sen(Generador.SENAA,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ADVERTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}

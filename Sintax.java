
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\004\005\000\002\004\010\000\002" +
    "\004\011\000\002\004\006\000\002\004\004\000\002\004" +
    "\004\000\002\004\007\000\002\004\004\000\002\004\007" +
    "\000\002\004\007\000\002\004\010\000\002\004\005\000" +
    "\002\004\007\000\002\004\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\011\000\002\004\005\000\002\004\010\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\010" +
    "\000\002\004\006\000\002\004\010\000\002\004\004\000" +
    "\002\004\004\000\002\004\006\000\002\004\005\000\002" +
    "\004\007\000\002\004\004\000\002\004\004\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\011\000" +
    "\002\004\010\000\002\004\004\000\002\004\004\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\005\010" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\010\010\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\007\011\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\006\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\011\010\000\002\011\011\000" +
    "\002\011\004\000\002\011\005\000\002\017\011\000\002" +
    "\020\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\010\004\006\026\004\034\005\001\002\000" +
    "\004\027\u0100\001\002\000\010\002\ufffe\004\014\026\013" +
    "\001\002\000\004\026\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\027\012\001\002" +
    "\000\004\002\ufffb\001\002\000\004\027\377\001\002\000" +
    "\010\002\ufffd\026\016\027\015\001\002\000\004\002\ufff9" +
    "\001\002\000\040\002\ufffc\004\031\012\046\013\036\014" +
    "\017\024\020\027\033\035\023\036\045\041\047\042\043" +
    "\043\037\044\040\045\042\046\027\001\002\000\004\024" +
    "\371\001\002\000\014\004\152\005\146\006\154\010\153" +
    "\011\151\001\002\000\036\004\uffde\012\uffde\013\uffde\014" +
    "\uffde\024\uffde\027\uffde\035\uffde\036\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\001\002\000\036\004" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\024\uffe4\027\uffe4\035\uffe4" +
    "\036\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\001\002\000\012\004\352\007\350\032\351\037\353" +
    "\001\002\000\036\004\031\012\046\013\036\014\017\024" +
    "\020\027\347\035\023\036\045\041\047\042\043\043\037" +
    "\044\040\045\042\046\027\001\002\000\036\004\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\024\ufff6\027\ufff6\035\ufff6\036\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\001" +
    "\002\000\036\004\uffee\012\uffee\013\uffee\014\uffee\024\uffee" +
    "\027\uffee\035\uffee\036\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\001\002\000\016\004\152\005\146" +
    "\006\154\010\153\011\151\024\330\001\002\000\036\004" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\024\uffe2\027\uffe2\035\uffe2" +
    "\036\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\001\002\000\014\005\301\007\303\032\304\037\305" +
    "\040\302\001\002\000\036\004\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\024\ufff4\027\ufff4\035\ufff4\036\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\001\002\000\004\002" +
    "\000\001\002\000\036\004\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\024\uffe0\027\uffe0\035\uffe0\036\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\001\002\000\036\004\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\024\uffe6\027\uffe6\035\uffe6\036" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\001\002\000\004\024\273\001\002\000\010\004\245\032" +
    "\244\037\246\001\002\000\006\004\204\024\203\001\002" +
    "\000\036\004\uffec\012\uffec\013\uffec\014\uffec\024\uffec\027" +
    "\uffec\035\uffec\036\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\001\002\000\016\004\152\005\146\006" +
    "\154\010\153\011\151\024\147\001\002\000\010\004\133" +
    "\032\132\037\134\001\002\000\036\004\uffea\012\uffea\013" +
    "\uffea\014\uffea\024\uffea\027\uffea\035\uffea\036\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\001\002\000" +
    "\010\004\113\032\112\037\114\001\002\000\004\024\100" +
    "\001\002\000\014\004\056\005\053\032\055\037\057\040" +
    "\054\001\002\000\036\004\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\024\ufff0\027\ufff0\035\ufff0\036\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\001\002\000\036\004\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\024\uffe8\027\uffe8\035\uffe8\036" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\001\002\000\036\004\ufff2\012\ufff2\013\ufff2\014\ufff2\024" +
    "\ufff2\027\ufff2\035\ufff2\036\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\001\002\000\004\040\074\001" +
    "\002\000\004\005\072\001\002\000\036\004\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\024\uffb7\027\uffb7\035\uffb7\036\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002" +
    "\000\042\004\uffb8\012\uffb8\013\uffb8\014\uffb8\024\uffb8\027" +
    "\uffb8\032\064\035\uffb8\036\uffb8\037\065\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\004\005" +
    "\060\001\002\000\004\040\061\001\002\000\004\005\062" +
    "\001\002\000\004\032\063\001\002\000\036\004\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\024\uffbb\027\uffbb\035\uffbb\036\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\001" +
    "\002\000\036\004\uffc3\012\uffc3\013\uffc3\014\uffc3\024\uffc3" +
    "\027\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\001\002\000\004\005\066\001\002" +
    "\000\004\040\067\001\002\000\004\005\070\001\002\000" +
    "\040\004\uffb9\012\uffb9\013\uffb9\014\uffb9\024\uffb9\027\uffb9" +
    "\032\071\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\001\002\000\036\004\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\024\uffc4\027\uffc4\035\uffc4\036\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002" +
    "\000\004\032\073\001\002\000\036\004\uffba\012\uffba\013" +
    "\uffba\014\uffba\024\uffba\027\uffba\035\uffba\036\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\001\002\000" +
    "\006\005\075\032\076\001\002\000\004\032\077\001\002" +
    "\000\036\004\uffb6\012\uffb6\013\uffb6\014\uffb6\024\uffb6\027" +
    "\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\001\002\000\036\004\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\024\uffbc\027\uffbc\035\uffbc\036\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000" +
    "\042\004\uff83\012\uff83\013\uff83\014\uff83\016\101\024\uff83" +
    "\025\102\027\uff83\035\uff83\036\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\001\002\000\006\004\104" +
    "\016\103\001\002\000\036\004\uff82\012\uff82\013\uff82\014" +
    "\uff82\024\uff82\027\uff82\035\uff82\036\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\045\uff82\046\uff82\001\002\000\004\025" +
    "\110\001\002\000\004\016\105\001\002\000\004\025\106" +
    "\001\002\000\004\032\107\001\002\000\036\004\uff84\012" +
    "\uff84\013\uff84\014\uff84\024\uff84\027\uff84\035\uff84\036\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\001" +
    "\002\000\004\032\111\001\002\000\036\004\uff85\012\uff85" +
    "\013\uff85\014\uff85\024\uff85\027\uff85\035\uff85\036\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\001\002" +
    "\000\036\004\uffd9\012\uffd9\013\uffd9\014\uffd9\024\uffd9\027" +
    "\uffd9\035\uffd9\036\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\001\002\000\042\004\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\024\uffd8\027\uffd8\032\120\035\uffd8\036\uffd8" +
    "\037\121\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\001\002\000\004\016\115\001\002\000\004\016\116" +
    "\001\002\000\004\032\117\001\002\000\036\004\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\024\uffd4\027\uffd4\035\uffd4\036\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\001" +
    "\002\000\036\004\uffdd\012\uffdd\013\uffdd\014\uffdd\024\uffdd" +
    "\027\uffdd\035\uffdd\036\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\001\002\000\006\016\122\032\123" +
    "\001\002\000\010\004\126\016\124\032\125\001\002\000" +
    "\036\004\uffda\012\uffda\013\uffda\014\uffda\024\uffda\027\uffda" +
    "\035\uffda\036\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\001\002\000\004\032\131\001\002\000\036" +
    "\004\uffd7\012\uffd7\013\uffd7\014\uffd7\024\uffd7\027\uffd7\035" +
    "\uffd7\036\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\001\002\000\004\016\127\001\002\000\040\004" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\024\uffd3\027\uffd3\032\130" +
    "\035\uffd3\036\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\001\002\000\036\004\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\024\uffdb\027\uffdb\035\uffdb\036\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\036" +
    "\004\uffdc\012\uffdc\013\uffdc\014\uffdc\024\uffdc\027\uffdc\035" +
    "\uffdc\036\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\001\002\000\036\004\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\024\uffb2\027\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\044\004" +
    "\uffb3\006\140\012\uffb3\013\uffb3\014\uffb3\024\uffb3\027\uffb3" +
    "\032\137\035\uffb3\036\uffb3\037\141\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\004\006\135" +
    "\001\002\000\004\032\136\001\002\000\036\004\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\024\uffb1\027\uffb1\035\uffb1\036\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\001" +
    "\002\000\036\004\uffb5\012\uffb5\013\uffb5\014\uffb5\024\uffb5" +
    "\027\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\001\002\000\004\032\145\001\002" +
    "\000\042\004\uffad\006\143\012\uffad\013\uffad\014\uffad\024" +
    "\uffad\027\uffad\032\142\035\uffad\036\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000\036\004" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\024\uffaf\027\uffaf\035\uffaf" +
    "\036\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\001\002\000\040\004\uffae\012\uffae\013\uffae\014\uffae" +
    "\024\uffae\027\uffae\032\144\035\uffae\036\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\001\002\000\036" +
    "\004\uffb4\012\uffb4\013\uffb4\014\uffb4\024\uffb4\027\uffb4\035" +
    "\uffb4\036\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\001\002\000\036\004\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\024\uffb0\027\uffb0\035\uffb0\036\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\001\002\000\006\004" +
    "\201\011\200\001\002\000\016\004\152\005\146\006\154" +
    "\010\153\011\151\025\167\001\002\000\004\025\163\001" +
    "\002\000\004\004\162\001\002\000\014\004\157\005\155" +
    "\011\156\025\uff8c\026\uff8c\001\002\000\006\025\uff8d\026" +
    "\uff8d\001\002\000\006\025\uff91\026\uff91\001\002\000\006" +
    "\025\uff8a\026\uff8a\001\002\000\012\004\161\005\160\025" +
    "\uff8b\026\uff8b\001\002\000\006\025\uff89\026\uff89\001\002" +
    "\000\006\025\uff90\026\uff90\001\002\000\006\025\uff8f\026" +
    "\uff8f\001\002\000\006\025\uff88\026\uff88\001\002\000\004" +
    "\026\164\001\002\000\004\027\165\001\002\000\036\004" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\024\uffa0\027\uffa0\035\uffa0" +
    "\036\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\001\002\000\006\025\173\026\172\001\002\000\004" +
    "\026\170\001\002\000\004\027\171\001\002\000\036\004" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\024\uff9f\027\uff9f\035\uff9f" +
    "\036\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\001\002\000\004\027\177\001\002\000\006\026\175" +
    "\027\174\001\002\000\036\004\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\024\uff9d\027\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000\004\027" +
    "\176\001\002\000\036\004\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\024\uffa1\027\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000\036\004\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\024\uff9e\027\uff9e\035\uff9e\036" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\001\002\000\010\004\202\025\uff86\026\uff86\001\002\000" +
    "\006\025\uff87\026\uff87\001\002\000\006\025\uff8e\026\uff8e" +
    "\001\002\000\004\025\240\001\002\000\006\024\205\025" +
    "\206\001\002\000\006\025\230\026\227\001\002\000\004" +
    "\026\207\001\002\000\034\004\031\012\046\013\036\014" +
    "\017\024\020\035\023\036\045\041\047\042\043\043\037" +
    "\044\040\045\042\046\027\001\002\000\036\004\031\012" +
    "\046\013\036\014\017\024\020\027\217\035\023\036\045" +
    "\041\047\042\043\043\037\044\040\045\042\046\027\001" +
    "\002\000\036\004\uffdf\012\uffdf\013\uffdf\014\uffdf\024\uffdf" +
    "\027\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\001\002\000\036\004\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\024\uffe5\027\uffe5\035\uffe5\036\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\001\002" +
    "\000\036\004\ufff7\012\ufff7\013\ufff7\014\ufff7\024\ufff7\027" +
    "\ufff7\035\ufff7\036\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\001\002\000\036\004\uffef\012\uffef\013" +
    "\uffef\014\uffef\024\uffef\027\uffef\035\uffef\036\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\001\002\000" +
    "\036\004\uffe3\012\uffe3\013\uffe3\014\uffe3\024\uffe3\027\uffe3" +
    "\035\uffe3\036\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\001\002\000\036\004\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\024\ufff5\027\ufff5\035\ufff5\036\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001\002\000\036" +
    "\004\uff94\012\uff94\013\uff94\014\uff94\024\uff94\027\uff94\035" +
    "\uff94\036\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\001\002\000\036\004\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\024\uffe1\027\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\036\004" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\024\uffe7\027\uffe7\035\uffe7" +
    "\036\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\001\002\000\036\004\uffed\012\uffed\013\uffed\014\uffed" +
    "\024\uffed\027\uffed\035\uffed\036\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\001\002\000\036\004\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\024\uffeb\027\uffeb\035\uffeb\036" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\001\002\000\036\004\ufff1\012\ufff1\013\ufff1\014\ufff1\024" +
    "\ufff1\027\ufff1\035\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\001\002\000\036\004\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\024\uffe9\027\uffe9\035\uffe9\036\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001" +
    "\002\000\036\004\ufff3\012\ufff3\013\ufff3\014\ufff3\024\ufff3" +
    "\027\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\001\002\000\034\004\031\012\046" +
    "\013\036\014\017\024\020\035\023\036\045\041\047\042" +
    "\043\043\037\044\040\045\042\046\027\001\002\000\036" +
    "\004\031\012\046\013\036\014\017\024\020\026\232\035" +
    "\023\036\045\041\047\042\043\043\037\044\040\045\042" +
    "\046\027\001\002\000\036\004\031\012\046\013\036\014" +
    "\017\024\020\027\235\035\023\036\045\041\047\042\043" +
    "\043\037\044\040\045\042\046\027\001\002\000\034\004" +
    "\031\012\046\013\036\014\017\024\020\035\023\036\045" +
    "\041\047\042\043\043\037\044\040\045\042\046\027\001" +
    "\002\000\036\004\031\012\046\013\036\014\017\024\020" +
    "\027\234\035\023\036\045\041\047\042\043\043\037\044" +
    "\040\045\042\046\027\001\002\000\036\004\uff96\012\uff96" +
    "\013\uff96\014\uff96\024\uff96\027\uff96\035\uff96\036\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\001\002" +
    "\000\036\004\uff92\012\uff92\013\uff92\014\uff92\024\uff92\027" +
    "\uff92\035\uff92\036\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\001\002\000\036\004\031\012\046\013" +
    "\036\014\017\024\020\027\237\035\023\036\045\041\047" +
    "\042\043\043\037\044\040\045\042\046\027\001\002\000" +
    "\036\004\uff93\012\uff93\013\uff93\014\uff93\024\uff93\027\uff93" +
    "\035\uff93\036\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\001\002\000\004\026\241\001\002\000\034" +
    "\004\031\012\046\013\036\014\017\024\020\035\023\036" +
    "\045\041\047\042\043\043\037\044\040\045\042\046\027" +
    "\001\002\000\036\004\031\012\046\013\036\014\017\024" +
    "\020\027\243\035\023\036\045\041\047\042\043\043\037" +
    "\044\040\045\042\046\027\001\002\000\036\004\uff95\012" +
    "\uff95\013\uff95\014\uff95\024\uff95\027\uff95\035\uff95\036\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\001" +
    "\002\000\036\004\uffa9\012\uffa9\013\uffa9\014\uffa9\024\uffa9" +
    "\027\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\001\002\000\044\004\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\016\253\024\uffa8\027\uffa8\032\254\035" +
    "\uffa8\036\uffa8\037\255\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\001\002\000\004\016\247\001\002\000" +
    "\004\004\250\001\002\000\004\016\251\001\002\000\004" +
    "\032\252\001\002\000\036\004\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\024\uffa3\027\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\001\002\000\004\004" +
    "\270\001\002\000\036\004\uffac\012\uffac\013\uffac\014\uffac" +
    "\024\uffac\027\uffac\035\uffac\036\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\001\002\000\006\004\257" +
    "\016\256\001\002\000\006\004\263\016\262\001\002\000" +
    "\004\016\260\001\002\000\004\032\261\001\002\000\036" +
    "\004\uffa5\012\uffa5\013\uffa5\014\uffa5\024\uffa5\027\uffa5\035" +
    "\uffa5\036\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\001\002\000\004\032\267\001\002\000\006\016" +
    "\264\032\265\001\002\000\040\004\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\024\uffa7\027\uffa7\032\266\035\uffa7\036\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002" +
    "\000\036\004\uffa6\012\uffa6\013\uffa6\014\uffa6\024\uffa6\027" +
    "\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\001\002\000\036\004\uffab\012\uffab\013" +
    "\uffab\014\uffab\024\uffab\027\uffab\035\uffab\036\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\001\002\000" +
    "\036\004\uffaa\012\uffaa\013\uffaa\014\uffaa\024\uffaa\027\uffaa" +
    "\035\uffaa\036\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\001\002\000\004\016\271\001\002\000\004" +
    "\032\272\001\002\000\036\004\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\024\uffa4\027\uffa4\035\uffa4\036\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\001\002\000\004\016" +
    "\274\001\002\000\004\004\275\001\002\000\004\016\276" +
    "\001\002\000\004\025\277\001\002\000\004\032\300\001" +
    "\002\000\036\004\uff81\012\uff81\013\uff81\014\uff81\024\uff81" +
    "\027\uff81\035\uff81\036\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\001\002\000\004\040\324\001\002" +
    "\000\006\005\321\032\322\001\002\000\036\004\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\024\uffcb\027\uffcb\035\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001" +
    "\002\000\036\004\uffd6\012\uffd6\013\uffd6\014\uffd6\024\uffd6" +
    "\027\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\001\002\000\044\004\uffc9\005\306" +
    "\012\uffc9\013\uffc9\014\uffc9\016\307\024\uffc9\027\uffc9\032" +
    "\310\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\040\004\uffca\012\uffca\013" +
    "\uffca\014\uffca\024\uffca\027\uffca\035\uffca\036\uffca\040\316" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\001" +
    "\002\000\006\004\312\016\311\001\002\000\036\004\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\024\uffbd\027\uffbd\035\uffbd\036" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\001\002\000\004\032\315\001\002\000\004\016\313\001" +
    "\002\000\004\032\314\001\002\000\036\004\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\024\uffa2\027\uffa2\035\uffa2\036\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002" +
    "\000\036\004\uffd5\012\uffd5\013\uffd5\014\uffd5\024\uffd5\027" +
    "\uffd5\035\uffd5\036\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\001\002\000\004\005\317\001\002\000" +
    "\004\032\320\001\002\000\036\004\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\024\uffc2\027\uffc2\035\uffc2\036\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\004" +
    "\032\323\001\002\000\036\004\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\024\uffbe\027\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\001\002\000\036\004" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\024\uffc0\027\uffc0\035\uffc0" +
    "\036\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\001\002\000\006\005\325\032\326\001\002\000\004" +
    "\032\327\001\002\000\036\004\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\024\uffbf\027\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002\000\036\004" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\024\uffc1\027\uffc1\035\uffc1" +
    "\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\001\002\000\016\004\152\005\146\006\154\010\153" +
    "\011\151\025\336\001\002\000\004\025\332\001\002\000" +
    "\004\026\333\001\002\000\004\027\334\001\002\000\036" +
    "\004\uff9a\012\uff9a\013\uff9a\014\uff9a\024\uff9a\027\uff9a\035" +
    "\uff9a\036\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\001\002\000\006\025\344\026\343\001\002\000" +
    "\004\026\337\001\002\000\036\004\031\012\046\013\036" +
    "\014\017\024\020\027\341\035\023\036\045\041\047\042" +
    "\043\043\037\044\040\045\042\046\027\001\002\000\036" +
    "\004\031\012\046\013\036\014\017\024\020\027\342\035" +
    "\023\036\045\041\047\042\043\043\037\044\040\045\042" +
    "\046\027\001\002\000\036\004\uff99\012\uff99\013\uff99\014" +
    "\uff99\024\uff99\027\uff99\035\uff99\036\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\001\002\000\036\004" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\024\uff9b\027\uff9b\035\uff9b" +
    "\036\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\001\002\000\004\027\346\001\002\000\004\027\345" +
    "\001\002\000\036\004\uff97\012\uff97\013\uff97\014\uff97\024" +
    "\uff97\027\uff97\035\uff97\036\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\001\002\000\036\004\uff98\012" +
    "\uff98\013\uff98\014\uff98\024\uff98\027\uff98\035\uff98\036\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\001" +
    "\002\000\004\002\uffff\001\002\000\040\004\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\024\uffcc\027\uffcc\032\364\035\uffcc\036" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\001\002\000\036\004\uffcf\012\uffcf\013\uffcf\014\uffcf\024" +
    "\uffcf\027\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\001\002\000\044\004\uffce\007" +
    "\356\012\uffce\013\uffce\014\uffce\024\uffce\027\uffce\032\357" +
    "\035\uffce\036\uffce\037\360\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\001\002\000\040\004\uffcd\005\354" +
    "\012\uffcd\013\uffcd\014\uffcd\024\uffcd\027\uffcd\035\uffcd\036" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\001\002\000\004\032\355\001\002\000\036\004\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\024\uffc7\027\uffc7\035\uffc7\036\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001" +
    "\002\000\040\004\uffc5\012\uffc5\013\uffc5\014\uffc5\024\uffc5" +
    "\027\uffc5\032\363\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\036\004\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\024\uffd2\027\uffd2\035\uffd2\036" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\001\002\000\004\005\361\001\002\000\040\004\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\024\uffc6\027\uffc6\032\362\035\uffc6" +
    "\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\001\002\000\036\004\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\024\uffd1\027\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002\000\036\004\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\024\uffd0\027\uffd0\035\uffd0\036" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\001\002\000\036\004\uffc8\012\uffc8\013\uffc8\014\uffc8\024" +
    "\uffc8\027\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\001\002\000\004\025\366\001" +
    "\002\000\004\026\367\001\002\000\004\027\370\001\002" +
    "\000\036\004\uff9c\012\uff9c\013\uff9c\014\uff9c\024\uff9c\027" +
    "\uff9c\035\uff9c\036\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\001\002\000\004\016\372\001\002\000" +
    "\004\004\373\001\002\000\004\016\374\001\002\000\004" +
    "\025\375\001\002\000\004\032\376\001\002\000\036\004" +
    "\uff80\012\uff80\013\uff80\014\uff80\024\uff80\027\uff80\035\uff80" +
    "\036\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046" +
    "\uff80\001\002\000\004\002\ufffa\001\002\000\004\002\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\023" +
    "\004\024\005\031\007\051\010\047\011\025\012\040\013" +
    "\043\014\050\015\034\016\021\017\027\020\033\021\020" +
    "\001\001\000\002\001\001\000\004\006\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\212\005\215\007\225\010\223\011\213\012\221\013" +
    "\222\014\224\015\220\016\211\017\214\020\217\021\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\207" +
    "\004\024\005\031\007\051\010\047\011\025\012\040\013" +
    "\043\014\050\015\034\016\021\017\027\020\033\021\020" +
    "\001\001\000\034\004\212\005\215\007\225\010\223\011" +
    "\213\012\221\013\222\014\224\015\220\016\211\017\214" +
    "\020\217\021\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\235\004\024\005\031\007\051\010\047\011\025\012\040" +
    "\013\043\014\050\015\034\016\021\017\027\020\033\021" +
    "\020\001\001\000\036\003\230\004\024\005\031\007\051" +
    "\010\047\011\025\012\040\013\043\014\050\015\034\016" +
    "\021\017\027\020\033\021\020\001\001\000\034\004\212" +
    "\005\215\007\225\010\223\011\213\012\221\013\222\014" +
    "\224\015\220\016\211\017\214\020\217\021\210\001\001" +
    "\000\036\003\232\004\024\005\031\007\051\010\047\011" +
    "\025\012\040\013\043\014\050\015\034\016\021\017\027" +
    "\020\033\021\020\001\001\000\034\004\212\005\215\007" +
    "\225\010\223\011\213\012\221\013\222\014\224\015\220" +
    "\016\211\017\214\020\217\021\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\212\005\215\007\225" +
    "\010\223\011\213\012\221\013\222\014\224\015\220\016" +
    "\211\017\214\020\217\021\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\241\004\024\005\031\007" +
    "\051\010\047\011\025\012\040\013\043\014\050\015\034" +
    "\016\021\017\027\020\033\021\020\001\001\000\034\004" +
    "\212\005\215\007\225\010\223\011\213\012\221\013\222" +
    "\014\224\015\220\016\211\017\214\020\217\021\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\337" +
    "\004\024\005\031\007\051\010\047\011\025\012\040\013" +
    "\043\014\050\015\034\016\021\017\027\020\033\021\020" +
    "\001\001\000\034\004\212\005\215\007\225\010\223\011" +
    "\213\012\221\013\222\014\224\015\220\016\211\017\214" +
    "\020\217\021\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_App Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio_App Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio_App 
            {
              Object RESULT =null;
		
    Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba un identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inicio_App Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_a "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Inicio_App Identificador Llave_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera la palabra de Inicio_App antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Inicio_App Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba identificador entre Inicio_App y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Inicio_App Identificador Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Llave_a entre Indentificador y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera = 'Inicio_App Identificador' antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA IMPRIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= IMPRIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Text Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"String",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Text Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		Generador.gc(Generador.DECLARACION,"String", null, id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Text Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Generador.gc(Generador.ASIGNACION,"String",id,text);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Text Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Text P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Text Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Text Identificador asignacion Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban un Tipo de dato antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Text antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Text asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignacion "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Text Identificador asignacion Comillas Identificador Comillas 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de las comillas "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Ent Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"int",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Ent Identificador asignacion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorIncDecleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorIncDecright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorIncDec = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,operadorIncDec);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Ent P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Ent Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion, operadorIncrementoDecremento despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Ent asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes de la asignacion y un Numero y P_Coma despuÃ©s de la misma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Ent operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes del operador y un P_coma despuÃ©s del mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del operador y un P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del Identificador y un P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Tipo de dato antes del Identificador, un Numero o Cadena despuÃ©s de la asginacion y un P_coma despuÃ©s del Mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Ent operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Ent asignacion Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Ent Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Real Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Numero1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Numero1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String Numero1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Numero2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Numero2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String Numero2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"float",Numero1+"."+Numero2,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Real Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"float",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Identificador Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Identificador punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Identificador Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Identificador punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y Numeros antes y despuÃ©s de punto"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Tipo de dato antes del Identificador y Variables despuÃ©s de la asignaciÃ³n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Real Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador y asignacion antes de Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Real asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignaciÃ³n "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Real punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Real Identificador asignacion Numero punto Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Ãºltimo Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Real Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Real P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Real Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"boolean",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Bool Identificador asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"boolean",operador,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Bool asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de asignacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Bool Identificador operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta asignacion antes de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Bool Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Bool Identificador asignacion operadorBooleano 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Bool Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano y P_coma despuÃ©s de asginacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Car Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"char",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Car Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Generador.gc(Generador.ASIGNACION,"char",caracter,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Car Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		Generador.gc(Generador.DECLARACION,"char",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Car P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Car Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma antes del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Car Identificador asignacion Comillas Identificador Comillas 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma antes de las Ãºltimas Comillas"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Car Identificador asignacion Comillas Identificador P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Faltan Comillas despuÃ©s del segundo Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Car Identificador asignacion Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Faltan Comillas antes del segundo Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Car Identificador Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta asignaciÃ³n antes de las primeras Comillas"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Car asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de asignacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta palabra Car antes de Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF ::= Y_si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= Y_si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Y_si o Mientras antes de parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MIENTRAS ::= Mientras SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TAREA ::= Tarea Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TAREA ::= Tarea Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TAREA ::= Tarea Identificador Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de la Sentencia"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= operadorBooleano 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,operador,"-","-");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id,operadorRelacional,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id1,operadorRelacional,id2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional Identificador 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,numero,operadorRelacional,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA ::= operadorLogico 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de operadorLogico"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operador despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Numero o Segundo Identificador despuÃ©s de operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_BOOLEANA ::= Identificador Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_BOOLEANA ::= Identificador Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_BOOLEANA ::= operadorRelacional Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Numero antes del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA ::= Numero Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional despuÃ©s del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Identificador despuÃ©s del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IMPRIME ::= Imprime Parentesis_a Comillas Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		Generador.mensaje(Generador.Imprime,Reservada,"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IMPRIME ::= Imprime Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.mensaje(Generador.Imprime,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IMPRIME ::= Imprime Parentesis_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c P_coma despuÃ©s de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IMPRIME ::= Imprime Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_AVISO ::= Aviso Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.sen(Generador.SENAV,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_AVISO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_ADVERTENCIA ::= Advertencia Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;
		int Reservadaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Reservadaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String Reservada = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		Generador.sen(Generador.SENAA,Reservada,texto);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ADVERTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}

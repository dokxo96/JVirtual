
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\004\005\000\002\004\010\000\002" +
    "\004\011\000\002\004\006\000\002\004\004\000\002\004" +
    "\004\000\002\004\007\000\002\004\004\000\002\004\007" +
    "\000\002\004\007\000\002\004\010\000\002\004\005\000" +
    "\002\004\007\000\002\004\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\011\000\002\004\005\000\002\004\010\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\010" +
    "\000\002\004\006\000\002\004\010\000\002\004\004\000" +
    "\002\004\004\000\002\004\006\000\002\004\005\000\002" +
    "\004\007\000\002\004\004\000\002\004\004\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\011\000" +
    "\002\004\010\000\002\004\004\000\002\004\004\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\005\011" +
    "\000\002\005\010\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\010\011\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\010\007\000\002\007\011\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\011\006\000" +
    "\002\011\011\000\002\011\004\000\002\011\005\000\002" +
    "\017\011\000\002\020\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\004\006\023\004\031\005\001\002\000" +
    "\004\024\u0101\001\002\000\010\002\ufffe\004\014\023\013" +
    "\001\002\000\004\023\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\024\012\001\002" +
    "\000\004\002\ufffb\001\002\000\004\024\u0100\001\002\000" +
    "\010\002\ufffd\023\016\024\015\001\002\000\004\002\ufff9" +
    "\001\002\000\040\002\ufffc\004\031\021\020\024\033\032" +
    "\023\033\045\036\047\037\043\040\040\041\037\042\042" +
    "\043\027\044\046\052\036\053\017\001\002\000\004\021" +
    "\372\001\002\000\014\004\150\005\144\006\151\010\152" +
    "\011\147\001\002\000\036\004\uffde\021\uffde\024\uffde\032" +
    "\uffde\033\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\052\uffde\053\uffde\001\002\000\036\004" +
    "\uffe4\021\uffe4\024\uffe4\032\uffe4\033\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\012\004\353\007\351\027\352\034\354" +
    "\001\002\000\036\004\031\021\020\024\350\032\023\033" +
    "\045\036\047\037\043\040\040\041\037\042\042\043\027" +
    "\044\046\052\036\053\017\001\002\000\036\004\ufff6\021" +
    "\ufff6\024\ufff6\032\ufff6\033\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\052\ufff6\053\ufff6\001" +
    "\002\000\036\004\uffee\021\uffee\024\uffee\032\uffee\033\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\052\uffee\053\uffee\001\002\000\016\004\150\005\144" +
    "\006\151\010\152\011\147\021\330\001\002\000\036\004" +
    "\uffe2\021\uffe2\024\uffe2\032\uffe2\033\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\014\005\301\007\303\027\304\034\305" +
    "\035\302\001\002\000\036\004\ufff4\021\ufff4\024\ufff4\032" +
    "\ufff4\033\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\052\ufff4\053\ufff4\001\002\000\004\002" +
    "\000\001\002\000\036\004\uffe0\021\uffe0\024\uffe0\032\uffe0" +
    "\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\052\uffe0\053\uffe0\001\002\000\036\004\uffe6" +
    "\021\uffe6\024\uffe6\032\uffe6\033\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\052\uffe6\053\uffe6" +
    "\001\002\000\004\021\273\001\002\000\006\004\250\021" +
    "\247\001\002\000\010\004\221\027\220\034\222\001\002" +
    "\000\036\004\uffec\021\uffec\024\uffec\032\uffec\033\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\052\uffec\053\uffec\001\002\000\016\004\150\005\144\006" +
    "\151\010\152\011\147\021\145\001\002\000\010\004\131" +
    "\027\130\034\132\001\002\000\036\004\uffea\021\uffea\024" +
    "\uffea\032\uffea\033\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\052\uffea\053\uffea\001\002\000" +
    "\010\004\111\027\110\034\112\001\002\000\004\021\100" +
    "\001\002\000\014\004\056\005\053\027\055\034\057\035" +
    "\054\001\002\000\036\004\ufff0\021\ufff0\024\ufff0\032\ufff0" +
    "\033\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\052\ufff0\053\ufff0\001\002\000\036\004\uffe8" +
    "\021\uffe8\024\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\052\uffe8\053\uffe8" +
    "\001\002\000\036\004\ufff2\021\ufff2\024\ufff2\032\ufff2\033" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\052\ufff2\053\ufff2\001\002\000\004\035\074\001" +
    "\002\000\004\005\072\001\002\000\036\004\uffb7\021\uffb7" +
    "\024\uffb7\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\052\uffb7\053\uffb7\001\002" +
    "\000\042\004\uffb8\021\uffb8\024\uffb8\027\064\032\uffb8\033" +
    "\uffb8\034\065\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\052\uffb8\053\uffb8\001\002\000\004\005" +
    "\060\001\002\000\004\035\061\001\002\000\004\005\062" +
    "\001\002\000\004\027\063\001\002\000\036\004\uffbb\021" +
    "\uffbb\024\uffbb\032\uffbb\033\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\036\004\uffc3\021\uffc3\024\uffc3\032\uffc3\033\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\052\uffc3\053\uffc3\001\002\000\004\005\066\001\002" +
    "\000\004\035\067\001\002\000\004\005\070\001\002\000" +
    "\040\004\uffb9\021\uffb9\024\uffb9\027\071\032\uffb9\033\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\052\uffb9\053\uffb9\001\002\000\036\004\uffc4\021\uffc4" +
    "\024\uffc4\032\uffc4\033\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\052\uffc4\053\uffc4\001\002" +
    "\000\004\027\073\001\002\000\036\004\uffba\021\uffba\024" +
    "\uffba\032\uffba\033\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\052\uffba\053\uffba\001\002\000" +
    "\006\005\075\027\076\001\002\000\004\027\077\001\002" +
    "\000\036\004\uffb6\021\uffb6\024\uffb6\032\uffb6\033\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\052\uffb6\053\uffb6\001\002\000\036\004\uffbc\021\uffbc\024" +
    "\uffbc\032\uffbc\033\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\052\uffbc\053\uffbc\001\002\000" +
    "\042\004\uff82\013\101\021\uff82\022\102\024\uff82\032\uff82" +
    "\033\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\052\uff82\053\uff82\001\002\000\004\004\104" +
    "\001\002\000\040\004\uff81\021\uff81\024\uff81\027\103\032" +
    "\uff81\033\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\052\uff81\053\uff81\001\002\000\036\004" +
    "\uff84\021\uff84\024\uff84\032\uff84\033\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\052\uff84\053" +
    "\uff84\001\002\000\004\013\105\001\002\000\004\022\106" +
    "\001\002\000\004\027\107\001\002\000\036\004\uff83\021" +
    "\uff83\024\uff83\032\uff83\033\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\042\uff83\043\uff83\044\uff83\052\uff83\053\uff83\001" +
    "\002\000\036\004\uffd9\021\uffd9\024\uffd9\032\uffd9\033\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\052\uffd9\053\uffd9\001\002\000\042\004\uffd8\021\uffd8" +
    "\024\uffd8\027\116\032\uffd8\033\uffd8\034\117\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\004\013\113\001\002\000\004\013" +
    "\114\001\002\000\004\027\115\001\002\000\036\004\uffd4" +
    "\021\uffd4\024\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\052\uffd4\053\uffd4" +
    "\001\002\000\036\004\uffdd\021\uffdd\024\uffdd\032\uffdd\033" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\052\uffdd\053\uffdd\001\002\000\006\013\120\027" +
    "\121\001\002\000\010\004\124\013\122\027\123\001\002" +
    "\000\036\004\uffda\021\uffda\024\uffda\032\uffda\033\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\052\uffda\053\uffda\001\002\000\004\027\127\001\002\000" +
    "\036\004\uffd7\021\uffd7\024\uffd7\032\uffd7\033\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\052" +
    "\uffd7\053\uffd7\001\002\000\004\013\125\001\002\000\040" +
    "\004\uffd3\021\uffd3\024\uffd3\027\126\032\uffd3\033\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\052\uffd3\053\uffd3\001\002\000\036\004\uffdb\021\uffdb\024" +
    "\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\052\uffdb\053\uffdb\001\002\000" +
    "\036\004\uffdc\021\uffdc\024\uffdc\032\uffdc\033\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\052" +
    "\uffdc\053\uffdc\001\002\000\036\004\uffb2\021\uffb2\024\uffb2" +
    "\032\uffb2\033\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\052\uffb2\053\uffb2\001\002\000\044" +
    "\004\uffb3\006\136\021\uffb3\024\uffb3\027\135\032\uffb3\033" +
    "\uffb3\034\137\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\052\uffb3\053\uffb3\001\002\000\004\006" +
    "\133\001\002\000\004\027\134\001\002\000\036\004\uffb1" +
    "\021\uffb1\024\uffb1\032\uffb1\033\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\052\uffb1\053\uffb1" +
    "\001\002\000\036\004\uffb5\021\uffb5\024\uffb5\032\uffb5\033" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\052\uffb5\053\uffb5\001\002\000\004\027\143\001" +
    "\002\000\042\004\uffad\006\141\021\uffad\024\uffad\027\140" +
    "\032\uffad\033\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\052\uffad\053\uffad\001\002\000\036" +
    "\004\uffaf\021\uffaf\024\uffaf\032\uffaf\033\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\052\uffaf" +
    "\053\uffaf\001\002\000\040\004\uffae\021\uffae\024\uffae\027" +
    "\142\032\uffae\033\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\052\uffae\053\uffae\001\002\000" +
    "\036\004\uffb4\021\uffb4\024\uffb4\032\uffb4\033\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\036\004\uffb0\021\uffb0\024\uffb0" +
    "\032\uffb0\033\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\052\uffb0\053\uffb0\001\002\000\006" +
    "\004\216\011\215\001\002\000\016\004\150\005\144\006" +
    "\151\010\152\011\147\022\165\001\002\000\004\022\161" +
    "\001\002\000\004\004\160\001\002\000\014\004\155\005" +
    "\153\011\154\022\uff8b\023\uff8b\001\002\000\006\022\uff90" +
    "\023\uff90\001\002\000\006\022\uff8c\023\uff8c\001\002\000" +
    "\006\022\uff89\023\uff89\001\002\000\012\004\157\005\156" +
    "\022\uff8a\023\uff8a\001\002\000\006\022\uff88\023\uff88\001" +
    "\002\000\006\022\uff8f\023\uff8f\001\002\000\006\022\uff8e" +
    "\023\uff8e\001\002\000\006\022\uff87\023\uff87\001\002\000" +
    "\004\023\162\001\002\000\004\024\163\001\002\000\036" +
    "\004\uff9f\021\uff9f\024\uff9f\032\uff9f\033\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\052\uff9f" +
    "\053\uff9f\001\002\000\006\022\171\023\170\001\002\000" +
    "\004\023\166\001\002\000\004\024\167\001\002\000\036" +
    "\004\uff9e\021\uff9e\024\uff9e\032\uff9e\033\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\052\uff9e" +
    "\053\uff9e\001\002\000\004\024\214\001\002\000\006\023" +
    "\173\024\172\001\002\000\036\004\uff9c\021\uff9c\024\uff9c" +
    "\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\052\uff9c\053\uff9c\001\002\000\036" +
    "\004\031\021\020\024\175\032\023\033\045\036\047\037" +
    "\043\040\040\041\037\042\042\043\027\044\046\052\036" +
    "\053\017\001\002\000\036\004\031\021\020\024\204\032" +
    "\023\033\045\036\047\037\043\040\040\041\037\042\042" +
    "\043\027\044\046\052\036\053\017\001\002\000\036\004" +
    "\uffa0\021\uffa0\024\uffa0\032\uffa0\033\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\052\uffa0\053" +
    "\uffa0\001\002\000\036\004\uffdf\021\uffdf\024\uffdf\032\uffdf" +
    "\033\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\052\uffdf\053\uffdf\001\002\000\036\004\uffe5" +
    "\021\uffe5\024\uffe5\032\uffe5\033\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\052\uffe5\053\uffe5" +
    "\001\002\000\036\004\ufff7\021\ufff7\024\ufff7\032\ufff7\033" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\052\ufff7\053\ufff7\001\002\000\036\004\uffef\021" +
    "\uffef\024\uffef\032\uffef\033\uffef\036\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\052\uffef\053\uffef\001" +
    "\002\000\036\004\uffe3\021\uffe3\024\uffe3\032\uffe3\033\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\052\uffe3\053\uffe3\001\002\000\036\004\ufff5\021\ufff5" +
    "\024\ufff5\032\ufff5\033\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\052\ufff5\053\ufff5\001\002" +
    "\000\036\004\uffa1\021\uffa1\024\uffa1\032\uffa1\033\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\052\uffa1\053\uffa1\001\002\000\036\004\uffe1\021\uffe1\024" +
    "\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\052\uffe1\053\uffe1\001\002\000" +
    "\036\004\uffe7\021\uffe7\024\uffe7\032\uffe7\033\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\052" +
    "\uffe7\053\uffe7\001\002\000\036\004\uffed\021\uffed\024\uffed" +
    "\032\uffed\033\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\052\uffed\053\uffed\001\002\000\036" +
    "\004\uffeb\021\uffeb\024\uffeb\032\uffeb\033\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\052\uffeb" +
    "\053\uffeb\001\002\000\036\004\ufff1\021\ufff1\024\ufff1\032" +
    "\ufff1\033\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\052\ufff1\053\ufff1\001\002\000\036\004" +
    "\uffe9\021\uffe9\024\uffe9\032\uffe9\033\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\052\uffe9\053" +
    "\uffe9\001\002\000\036\004\ufff3\021\ufff3\024\ufff3\032\ufff3" +
    "\033\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\052\ufff3\053\ufff3\001\002\000\036\004\uff9d" +
    "\021\uff9d\024\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\052\uff9d\053\uff9d" +
    "\001\002\000\010\004\217\022\uff85\023\uff85\001\002\000" +
    "\006\022\uff86\023\uff86\001\002\000\006\022\uff8d\023\uff8d" +
    "\001\002\000\036\004\uffa9\021\uffa9\024\uffa9\032\uffa9\033" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\052\uffa9\053\uffa9\001\002\000\044\004\uffa8\013" +
    "\227\021\uffa8\024\uffa8\027\230\032\uffa8\033\uffa8\034\231" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\052\uffa8\053\uffa8\001\002\000\004\013\223\001\002" +
    "\000\004\004\224\001\002\000\004\013\225\001\002\000" +
    "\004\027\226\001\002\000\036\004\uffa3\021\uffa3\024\uffa3" +
    "\032\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\052\uffa3\053\uffa3\001\002\000\004" +
    "\004\244\001\002\000\036\004\uffac\021\uffac\024\uffac\032" +
    "\uffac\033\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\052\uffac\053\uffac\001\002\000\006\004" +
    "\233\013\232\001\002\000\006\004\237\013\236\001\002" +
    "\000\004\013\234\001\002\000\004\027\235\001\002\000" +
    "\036\004\uffa5\021\uffa5\024\uffa5\032\uffa5\033\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\052" +
    "\uffa5\053\uffa5\001\002\000\004\027\243\001\002\000\006" +
    "\013\240\027\241\001\002\000\040\004\uffa7\021\uffa7\024" +
    "\uffa7\027\242\032\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\052\uffa7\053\uffa7\001" +
    "\002\000\036\004\uffa6\021\uffa6\024\uffa6\032\uffa6\033\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\052\uffa6\053\uffa6\001\002\000\036\004\uffab\021\uffab" +
    "\024\uffab\032\uffab\033\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\052\uffab\053\uffab\001\002" +
    "\000\036\004\uffaa\021\uffaa\024\uffaa\032\uffaa\033\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\052\uffaa\053\uffaa\001\002\000\004\013\245\001\002\000" +
    "\004\027\246\001\002\000\036\004\uffa4\021\uffa4\024\uffa4" +
    "\032\uffa4\033\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\052\uffa4\053\uffa4\001\002\000\004" +
    "\022\267\001\002\000\006\021\251\022\252\001\002\000" +
    "\006\022\257\023\256\001\002\000\004\023\253\001\002" +
    "\000\034\004\031\021\020\032\023\033\045\036\047\037" +
    "\043\040\040\041\037\042\042\043\027\044\046\052\036" +
    "\053\017\001\002\000\036\004\031\021\020\024\255\032" +
    "\023\033\045\036\047\037\043\040\040\041\037\042\042" +
    "\043\027\044\046\052\036\053\017\001\002\000\036\004" +
    "\uff93\021\uff93\024\uff93\032\uff93\033\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\052\uff93\053" +
    "\uff93\001\002\000\034\004\031\021\020\032\023\033\045" +
    "\036\047\037\043\040\040\041\037\042\042\043\027\044" +
    "\046\052\036\053\017\001\002\000\036\004\031\021\020" +
    "\023\261\032\023\033\045\036\047\037\043\040\040\041" +
    "\037\042\042\043\027\044\046\052\036\053\017\001\002" +
    "\000\036\004\031\021\020\024\264\032\023\033\045\036" +
    "\047\037\043\040\040\041\037\042\042\043\027\044\046" +
    "\052\036\053\017\001\002\000\034\004\031\021\020\032" +
    "\023\033\045\036\047\037\043\040\040\041\037\042\042" +
    "\043\027\044\046\052\036\053\017\001\002\000\036\004" +
    "\031\021\020\024\263\032\023\033\045\036\047\037\043" +
    "\040\040\041\037\042\042\043\027\044\046\052\036\053" +
    "\017\001\002\000\036\004\uff95\021\uff95\024\uff95\032\uff95" +
    "\033\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\052\uff95\053\uff95\001\002\000\036\004\uff91" +
    "\021\uff91\024\uff91\032\uff91\033\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\052\uff91\053\uff91" +
    "\001\002\000\036\004\031\021\020\024\266\032\023\033" +
    "\045\036\047\037\043\040\040\041\037\042\042\043\027" +
    "\044\046\052\036\053\017\001\002\000\036\004\uff92\021" +
    "\uff92\024\uff92\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\052\uff92\053\uff92\001" +
    "\002\000\004\023\270\001\002\000\034\004\031\021\020" +
    "\032\023\033\045\036\047\037\043\040\040\041\037\042" +
    "\042\043\027\044\046\052\036\053\017\001\002\000\036" +
    "\004\031\021\020\024\272\032\023\033\045\036\047\037" +
    "\043\040\040\041\037\042\042\043\027\044\046\052\036" +
    "\053\017\001\002\000\036\004\uff94\021\uff94\024\uff94\032" +
    "\uff94\033\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\052\uff94\053\uff94\001\002\000\004\013" +
    "\274\001\002\000\004\004\275\001\002\000\004\013\276" +
    "\001\002\000\004\022\277\001\002\000\004\027\300\001" +
    "\002\000\036\004\uff80\021\uff80\024\uff80\032\uff80\033\uff80" +
    "\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\052\uff80\053\uff80\001\002\000\004\035\324\001\002" +
    "\000\006\005\321\027\322\001\002\000\036\004\uffcb\021" +
    "\uffcb\024\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\052\uffcb\053\uffcb\001" +
    "\002\000\036\004\uffd6\021\uffd6\024\uffd6\032\uffd6\033\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\044\004\uffc9\005\306" +
    "\013\307\021\uffc9\024\uffc9\027\310\032\uffc9\033\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\052\uffc9\053\uffc9\001\002\000\040\004\uffca\021\uffca\024" +
    "\uffca\032\uffca\033\uffca\035\316\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\052\uffca\053\uffca\001" +
    "\002\000\006\004\312\013\311\001\002\000\036\004\uffbd" +
    "\021\uffbd\024\uffbd\032\uffbd\033\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\052\uffbd\053\uffbd" +
    "\001\002\000\004\027\315\001\002\000\004\013\313\001" +
    "\002\000\004\027\314\001\002\000\036\004\uffa2\021\uffa2" +
    "\024\uffa2\032\uffa2\033\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\052\uffa2\053\uffa2\001\002" +
    "\000\036\004\uffd5\021\uffd5\024\uffd5\032\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\004\005\317\001\002\000" +
    "\004\027\320\001\002\000\036\004\uffc2\021\uffc2\024\uffc2" +
    "\032\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\052\uffc2\053\uffc2\001\002\000\004" +
    "\027\323\001\002\000\036\004\uffbe\021\uffbe\024\uffbe\032" +
    "\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\052\uffbe\053\uffbe\001\002\000\036\004" +
    "\uffc0\021\uffc0\024\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\006\005\325\027\326\001\002\000\004" +
    "\027\327\001\002\000\036\004\uffbf\021\uffbf\024\uffbf\032" +
    "\uffbf\033\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\052\uffbf\053\uffbf\001\002\000\036\004" +
    "\uffc1\021\uffc1\024\uffc1\032\uffc1\033\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\052\uffc1\053" +
    "\uffc1\001\002\000\016\004\150\005\144\006\151\010\152" +
    "\011\147\022\336\001\002\000\004\022\332\001\002\000" +
    "\004\023\333\001\002\000\004\024\334\001\002\000\036" +
    "\004\uff99\021\uff99\024\uff99\032\uff99\033\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\052\uff99" +
    "\053\uff99\001\002\000\006\022\342\023\341\001\002\000" +
    "\004\023\337\001\002\000\004\024\340\001\002\000\036" +
    "\004\uff98\021\uff98\024\uff98\032\uff98\033\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\052\uff98" +
    "\053\uff98\001\002\000\004\024\347\001\002\000\006\023" +
    "\344\024\343\001\002\000\036\004\uff96\021\uff96\024\uff96" +
    "\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\052\uff96\053\uff96\001\002\000\034" +
    "\004\031\021\020\032\023\033\045\036\047\037\043\040" +
    "\040\041\037\042\042\043\027\044\046\052\036\053\017" +
    "\001\002\000\036\004\031\021\020\024\346\032\023\033" +
    "\045\036\047\037\043\040\040\041\037\042\042\043\027" +
    "\044\046\052\036\053\017\001\002\000\036\004\uff9a\021" +
    "\uff9a\024\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\052\uff9a\053\uff9a\001" +
    "\002\000\036\004\uff97\021\uff97\024\uff97\032\uff97\033\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\052\uff97\053\uff97\001\002\000\004\002\uffff\001\002" +
    "\000\040\004\uffcc\021\uffcc\024\uffcc\027\365\032\uffcc\033" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\052\uffcc\053\uffcc\001\002\000\036\004\uffcf\021" +
    "\uffcf\024\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\052\uffcf\053\uffcf\001" +
    "\002\000\044\004\uffce\007\357\021\uffce\024\uffce\027\360" +
    "\032\uffce\033\uffce\034\361\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\052\uffce\053\uffce\001\002" +
    "\000\040\004\uffcd\005\355\021\uffcd\024\uffcd\032\uffcd\033" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\052\uffcd\053\uffcd\001\002\000\004\027\356\001" +
    "\002\000\036\004\uffc7\021\uffc7\024\uffc7\032\uffc7\033\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\052\uffc7\053\uffc7\001\002\000\040\004\uffc5\021\uffc5" +
    "\024\uffc5\027\364\032\uffc5\033\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\052\uffc5\053\uffc5" +
    "\001\002\000\036\004\uffd2\021\uffd2\024\uffd2\032\uffd2\033" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\052\uffd2\053\uffd2\001\002\000\004\005\362\001" +
    "\002\000\040\004\uffc6\021\uffc6\024\uffc6\027\363\032\uffc6" +
    "\033\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\052\uffc6\053\uffc6\001\002\000\036\004\uffd1" +
    "\021\uffd1\024\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\052\uffd1\053\uffd1" +
    "\001\002\000\036\004\uffd0\021\uffd0\024\uffd0\032\uffd0\033" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\052\uffd0\053\uffd0\001\002\000\036\004\uffc8\021" +
    "\uffc8\024\uffc8\032\uffc8\033\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\052\uffc8\053\uffc8\001" +
    "\002\000\004\022\367\001\002\000\004\023\370\001\002" +
    "\000\004\024\371\001\002\000\036\004\uff9b\021\uff9b\024" +
    "\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\052\uff9b\053\uff9b\001\002\000" +
    "\004\013\373\001\002\000\004\004\374\001\002\000\004" +
    "\013\375\001\002\000\004\022\376\001\002\000\004\027" +
    "\377\001\002\000\036\004\uff7f\021\uff7f\024\uff7f\032\uff7f" +
    "\033\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\052\uff7f\053\uff7f\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\023" +
    "\004\024\005\031\007\051\010\047\011\025\012\040\013" +
    "\043\014\050\015\034\016\021\017\027\020\033\021\020" +
    "\001\001\000\002\001\001\000\004\006\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\177\005\202\007\212\010\210\011\200\012\206\013" +
    "\207\014\211\015\205\016\176\017\201\020\204\021\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\173\004\024\005\031\007\051\010\047\011" +
    "\025\012\040\013\043\014\050\015\034\016\021\017\027" +
    "\020\033\021\020\001\001\000\034\004\177\005\202\007" +
    "\212\010\210\011\200\012\206\013\207\014\211\015\205" +
    "\016\176\017\201\020\204\021\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\253\004\024\005\031\007\051\010\047\011\025" +
    "\012\040\013\043\014\050\015\034\016\021\017\027\020" +
    "\033\021\020\001\001\000\034\004\177\005\202\007\212" +
    "\010\210\011\200\012\206\013\207\014\211\015\205\016" +
    "\176\017\201\020\204\021\175\001\001\000\002\001\001" +
    "\000\036\003\264\004\024\005\031\007\051\010\047\011" +
    "\025\012\040\013\043\014\050\015\034\016\021\017\027" +
    "\020\033\021\020\001\001\000\036\003\257\004\024\005" +
    "\031\007\051\010\047\011\025\012\040\013\043\014\050" +
    "\015\034\016\021\017\027\020\033\021\020\001\001\000" +
    "\034\004\177\005\202\007\212\010\210\011\200\012\206" +
    "\013\207\014\211\015\205\016\176\017\201\020\204\021" +
    "\175\001\001\000\036\003\261\004\024\005\031\007\051" +
    "\010\047\011\025\012\040\013\043\014\050\015\034\016" +
    "\021\017\027\020\033\021\020\001\001\000\034\004\177" +
    "\005\202\007\212\010\210\011\200\012\206\013\207\014" +
    "\211\015\205\016\176\017\201\020\204\021\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\177\005" +
    "\202\007\212\010\210\011\200\012\206\013\207\014\211" +
    "\015\205\016\176\017\201\020\204\021\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\270\004\024" +
    "\005\031\007\051\010\047\011\025\012\040\013\043\014" +
    "\050\015\034\016\021\017\027\020\033\021\020\001\001" +
    "\000\034\004\177\005\202\007\212\010\210\011\200\012" +
    "\206\013\207\014\211\015\205\016\176\017\201\020\204" +
    "\021\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\344\004\024\005\031" +
    "\007\051\010\047\011\025\012\040\013\043\014\050\015" +
    "\034\016\021\017\027\020\033\021\020\001\001\000\034" +
    "\004\177\005\202\007\212\010\210\011\200\012\206\013" +
    "\207\014\211\015\205\016\176\017\201\020\204\021\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_App Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio_App Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio_App 
            {
              Object RESULT =null;
		
    Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba un identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inicio_App Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_a "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Inicio_App Identificador Llave_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera la palabra de Inicio_App antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Inicio_App Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba identificador entre Inicio_App y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Inicio_App Identificador Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Llave_a entre Indentificador y Llave_c "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera = 'Inicio_App Identificador' antes "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= TAREA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA IMPRIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= IMPRIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA_GIRA_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA_GIRA_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA_AVANZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA_RETROCEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA_DETENER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA_AVISO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA_ADVERTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA_VERIFICA_BATERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Text Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"String",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Text Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		Generador.gc(Generador.DECLARACION,"String", null, id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Text Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Generador.gc(Generador.ASIGNACION,"String",id,text);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Text Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Text P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Text Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Text Identificador asignacion Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban Comillas antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaban un Tipo de dato antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Text antes de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Text asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignacion "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Text Identificador asignacion Comillas Identificador Comillas 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de las comillas "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Ent Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"int",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Ent Identificador asignacion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorIncDecleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorIncDecright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorIncDec = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"int",id,operadorIncDec);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Ent P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Ent Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un P_coma y/o asignacion, operadorIncrementoDecremento despuÃ©s de Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Ent asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes de la asignacion y un Numero y P_Coma despuÃ©s de la misma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Ent operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Identificador antes del operador y un P_coma despuÃ©s del mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del operador y un P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Ent antes del Identificador y un P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba un Tipo de dato antes del Identificador, un Numero o Cadena despuÃ©s de la asginacion y un P_coma despuÃ©s del Mismo "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Ent operadorIncrementoDecremento P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Ent asignacion Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Ent "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Ent Identificador asignacion Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Ent Identificador operadorIncrementoDecremento 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s de operadorIncrementoDecremento "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Real Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Numero1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Numero1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String Numero1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Numero2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Numero2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String Numero2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"float",Numero1+"."+Numero2,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Real Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"float",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Identificador asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Identificador Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Identificador punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Identificador Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Identificador punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Real antes del Identificador y asignaciÃ³n despuÃ©s del Identificador y Numeros antes y despuÃ©s de punto"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Tipo de dato antes del Identificador y Variables despuÃ©s de la asignaciÃ³n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Real Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador y asignacion antes de Numero "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Real asignacion Numero punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de asignaciÃ³n "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Real punto Numero P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba la palabra Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de punto "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Real Identificador asignacion Numero punto Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Ãºltimo Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Real Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba P_coma despuÃ©s del Identificador "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Real P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador antes de P_coma "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Real Numero punto P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Identificador despuÃ©s de Real y asignaciÃ³n despuÃ©s del Identificador y un Numero antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"boolean",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Bool Identificador asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.ASIGNACION,"boolean",operador,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Bool asignacion operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de asignacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Bool Identificador operadorBooleano P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta asignacion antes de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Bool Identificador asignacion P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Bool Identificador asignacion operadorBooleano 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de operadorBooleano"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Bool Identificador asignacion 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorBooleano y P_coma despuÃ©s de asginacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Car Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Generador.gc(Generador.DECLARACION,"char",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Car Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Generador.gc(Generador.ASIGNACION,"char",caracter,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Car Identificador asignacion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		Generador.gc(Generador.DECLARACION,"char",null,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Car P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de P_coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Car Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma antes del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Car Identificador asignacion Comillas Identificador Comillas 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma antes de las Ãºltimas Comillas"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Car Identificador asignacion Comillas Identificador P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Faltan Comillas despuÃ©s del segundo Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Car Identificador asignacion Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Faltan Comillas antes del segundo Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Car Identificador Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta asignaciÃ³n antes de las primeras Comillas"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Car asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de asignacion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Identificador asignacion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta palabra Car antes de Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= Y_si SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= Y_si Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Y_si o Mientras antes de parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MIENTRAS ::= Mientras SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de SENTENCIA_BOOLEANA"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MIENTRAS ::= Mientras Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta SENTENCIA_BOOLEANA antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Llave_a Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de Llave_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TAREA ::= Tarea Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TAREA ::= Tarea Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_a antes de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TAREA ::= Tarea Identificador Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c antes de Llave_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TAREA ::= Tarea Identificador Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Llave_a antes de la Sentencia"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAREA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= operadorBooleano 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,operador,"-","-");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id,operadorRelacional,numero);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,id1,operadorRelacional,id2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional Identificador 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorRelacionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorRelacionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String operadorRelacional = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Generador.bool(Generador.DeclaracionBool,numero,operadorRelacional,id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_BOOLEANA ::= operadorLogico 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Identificador antes de operadorLogico"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operador despuÃ©s del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_BOOLEANA ::= Identificador operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Numero o Segundo Identificador despuÃ©s de operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_BOOLEANA ::= Identificador Numero 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_BOOLEANA ::= Identificador Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional antes del Identificador"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA ::= operadorRelacional Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Numero antes del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_BOOLEANA ::= Numero Identificador 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta operadorRelacional despuÃ©s del Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_BOOLEANA ::= Numero operadorRelacional 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta un Identificador despuÃ©s del operadorRelacional"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IMPRIME ::= Imprime Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IMPRIME ::= Imprime Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IMPRIME ::= Imprime Parentesis_a 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta Parentesis_c P_coma despuÃ©s de Parentesis_a"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IMPRIME ::= Imprime Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta P_coma despuÃ©s de Parentesis_c"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIME",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_AVISO ::= Aviso Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_AVISO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_ADVERTENCIA ::= Advertencia Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ADVERTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}

/* The following code was generated by JFlex 1.7.0 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/dokxo/Documents/NetBeansProjects/JVirtual/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\13\1\15\1\15\1\14\22\0\1\11\1\73\1\5"+
    "\1\4\2\0\1\71\1\0\1\22\1\23\1\21\1\17\1\10\1\20"+
    "\1\46\1\12\12\2\1\4\1\30\1\45\1\16\1\74\1\0\1\4"+
    "\1\36\1\57\1\3\1\65\1\44\1\70\1\60\1\3\1\31\3\3"+
    "\1\55\4\3\1\47\1\3\1\40\1\3\1\66\2\3\1\52\1\3"+
    "\1\26\1\0\1\27\1\0\1\1\1\0\1\50\1\3\1\34\1\63"+
    "\1\41\1\67\2\3\1\33\2\3\1\51\1\56\1\32\1\35\1\37"+
    "\1\62\1\54\1\53\1\43\1\3\1\64\1\3\1\42\1\3\1\61"+
    "\1\24\1\72\1\25\7\0\1\15\44\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\165\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\255\6\1\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\55\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\10\0\33\6\5\0\3\6\35\0\13\6\5\0"+
    "\112\6\4\0\146\6\1\0\10\6\2\0\12\6\1\0\23\6\2\0"+
    "\1\6\20\0\73\6\2\0\145\6\16\0\66\6\4\0\1\6\5\0"+
    "\56\6\22\0\34\6\104\0\25\6\1\0\10\6\26\0\16\6\1\0"+
    "\201\6\2\0\12\6\1\0\23\6\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\11\6\2\0"+
    "\2\6\2\0\4\6\10\0\1\6\4\0\2\6\1\0\5\6\2\0"+
    "\14\6\17\0\3\6\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\6\1\0"+
    "\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\6\1\0"+
    "\1\6\7\0\20\6\13\0\3\6\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\12\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\6\17\0\4\6\2\0\12\6\11\0"+
    "\1\6\7\0\3\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\11\6\2\0\2\6\2\0"+
    "\3\6\10\0\2\6\4\0\2\6\1\0\5\6\2\0\12\6\1\0"+
    "\1\6\20\0\2\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\6\6\0"+
    "\1\6\16\0\12\6\20\0\4\6\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\10\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\3\6\5\0\4\6\2\0\12\6\20\0\4\6\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\11\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\6\1\0"+
    "\4\6\2\0\12\6\1\0\2\6\16\0\3\6\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\10\6\1\0\3\6\1\0\5\6\5\0"+
    "\4\6\7\0\5\6\2\0\12\6\12\0\6\6\2\0\2\6\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\6\4\0\6\6\1\0\1\6\1\0\10\6\6\0\12\6\2\0"+
    "\2\6\15\0\72\6\5\0\17\6\1\0\12\6\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\15\6\1\0\3\6\2\0\5\6\1\0\1\6\1\0\6\6\2\0"+
    "\12\6\2\0\4\6\40\0\1\6\27\0\2\6\6\0\12\6\13\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\12\6\1\0\44\6\4\0"+
    "\24\6\1\0\22\6\1\0\44\6\11\0\1\6\71\0\112\6\6\0"+
    "\116\6\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\3\6\40\0\20\6\20\0\126\6\2\0\6\6\3\0"+
    "\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0"+
    "\15\6\1\0\7\6\13\0\25\6\13\0\24\6\14\0\15\6\1\0"+
    "\3\6\1\0\2\6\14\0\124\6\3\0\1\6\4\0\2\6\2\0"+
    "\12\6\41\0\3\6\2\0\12\6\6\0\130\6\10\0\53\6\5\0"+
    "\106\6\12\0\37\6\1\0\14\6\4\0\14\6\12\0\50\6\2\0"+
    "\5\6\13\0\54\6\4\0\32\6\6\0\12\6\46\0\34\6\4\0"+
    "\77\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\6\10\0"+
    "\17\6\101\0\114\6\4\0\12\6\21\0\11\6\14\0\164\6\14\0"+
    "\70\6\10\0\12\6\3\0\61\6\2\0\11\6\107\0\3\6\1\0"+
    "\43\6\1\0\2\6\6\0\366\6\5\0\u011b\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\53\0\1\15\1\15\25\0\2\6\23\0\1\6"+
    "\34\0\1\6\15\0\1\6\20\0\15\6\63\0\41\6\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u032d\0\64\6\u0716\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\11\6\14\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\70\6\7\0\1\6\17\0\30\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\40\6\57\0\1\6\u01d5\0\3\6"+
    "\31\0\17\6\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\6"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51d6\6\52\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\34\6\24\0\63\6\1\0\12\6"+
    "\1\0\163\6\45\0\11\6\2\0\147\6\2\0\44\6\1\0\10\6"+
    "\77\0\61\6\30\0\64\6\14\0\106\6\12\0\12\6\6\0\30\6"+
    "\3\0\1\6\1\0\1\6\2\0\56\6\2\0\44\6\14\0\35\6"+
    "\3\0\101\6\16\0\13\6\6\0\37\6\1\0\67\6\11\0\16\6"+
    "\2\0\12\6\6\0\27\6\3\0\111\6\30\0\3\6\2\0\20\6"+
    "\2\0\5\6\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\1\0\53\6\1\0\12\6\12\0\173\6\1\0\2\6"+
    "\2\0\12\6\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\14\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6\4\0\20\6"+
    "\20\0\20\6\3\0\2\6\30\0\3\6\40\0\5\6\1\0\207\6"+
    "\23\0\12\6\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\43\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\105\0\65\6\210\0\1\6\202\0\35\6\3\0\61\6"+
    "\17\0\1\6\37\0\40\6\20\0\33\6\5\0\53\6\5\0\36\6"+
    "\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\6"+
    "\6\0\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0\u0137\6"+
    "\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6"+
    "\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6"+
    "\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0\70\6"+
    "\6\0\2\6\100\0\4\6\1\0\2\6\5\0\10\6\1\0\3\6"+
    "\1\0\33\6\4\0\3\6\4\0\1\6\40\0\35\6\3\0\35\6"+
    "\43\0\10\6\1\0\36\6\31\0\66\6\12\0\26\6\12\0\23\6"+
    "\15\0\22\6\156\0\111\6\67\0\63\6\15\0\63\6\u030d\0\107\6"+
    "\37\0\12\6\17\0\74\6\25\0\31\6\7\0\12\6\6\0\65\6"+
    "\1\0\12\6\20\0\44\6\2\0\1\6\11\0\105\6\5\0\3\6"+
    "\3\0\13\6\1\0\1\6\43\0\22\6\1\0\45\6\6\0\1\6"+
    "\101\0\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6"+
    "\7\0\73\6\5\0\12\6\6\0\4\6\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\11\6"+
    "\2\0\2\6\2\0\3\6\2\0\1\6\6\0\1\6\5\0\7\6"+
    "\2\0\7\6\3\0\5\6\213\0\113\6\5\0\12\6\46\0\106\6"+
    "\1\0\1\6\10\0\12\6\246\0\66\6\2\0\11\6\27\0\6\6"+
    "\42\0\101\6\3\0\1\6\13\0\12\6\46\0\70\6\10\0\12\6"+
    "\66\0\32\6\3\0\17\6\4\0\12\6\u0166\0\112\6\25\0\1\6"+
    "\u01c0\0\71\6\u0107\0\11\6\1\0\55\6\1\0\11\6\17\0\12\6"+
    "\30\0\36\6\2\0\26\6\1\0\16\6\u0349\0\u039a\6\146\0\157\6"+
    "\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0\37\6"+
    "\1\0\12\6\146\0\36\6\2\0\5\6\13\0\67\6\11\0\4\6"+
    "\14\0\12\6\11\0\25\6\5\0\23\6\u0370\0\105\6\13\0\57\6"+
    "\20\0\21\6\100\0\1\6\37\0\u17ed\6\23\0\u02f3\6\u250d\0\2\6"+
    "\u0bfe\0\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\6"+
    "\u14c6\0\5\6\3\0\6\6\10\0\10\6\2\0\7\6\36\0\4\6"+
    "\224\0\3\6\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6"+
    "\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6"+
    "\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6"+
    "\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6"+
    "\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\10\6\2\0\62\6\u0200\0\67\6\4\0\62\6\10\0\1\6"+
    "\16\0\1\6\26\0\5\6\1\0\17\6\u0550\0\7\6\1\0\21\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\u07d5\0\305\6\13\0\7\6"+
    "\51\0\113\6\5\0\12\6\u04a6\0\4\6\1\0\33\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6"+
    "\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6"+
    "\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6"+
    "\u0274\0\32\6\6\0\32\6\6\0\32\6\u0e76\0\ua6d7\6\51\0\u1035\6"+
    "\13\0\336\6\2\0\u1682\6\u295e\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\4\2\1\24\1\25\10\2"+
    "\1\1\1\4\1\26\1\24\1\0\1\4\1\0\1\4"+
    "\1\27\1\6\1\24\1\30\1\0\7\2\1\31\10\2"+
    "\1\26\2\0\7\2\1\32\11\2\1\0\1\3\5\2"+
    "\1\33\2\2\1\34\1\35\1\2\1\36\5\2\1\0"+
    "\3\2\1\37\1\2\1\40\6\2\1\41\1\0\3\2"+
    "\1\42\6\2\1\0\1\2\1\43\5\2\1\44\1\2"+
    "\1\0\3\2\1\45\1\46\1\47\1\2\1\0\4\2"+
    "\1\0\1\50\1\2\1\51\1\2\1\0\1\52\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\53\17\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\75\0\u02dc\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\75\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u0225\0\u06e9"+
    "\0\u0726\0\u0763\0\u0131\0\75\0\u07a0\0\75\0\75\0\u07dd"+
    "\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\75"+
    "\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70"+
    "\0\75\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\172\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\75\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\172\0\u1165\0\u11a2\0\172\0\172"+
    "\0\u11df\0\172\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\172\0\u1441\0\172\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\172\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\172\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\172\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\172\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\172\0\172"+
    "\0\172\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\172\0\u1cd5\0\172\0\u1d12\0\u1d4f\0\172\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\172\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344"+
    "\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\2\1\7"+
    "\1\10\1\7\1\11\1\12\1\7\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\4\3\1\27\1\3\1\30\3\3\1\31"+
    "\1\32\1\33\1\34\2\3\1\35\2\3\1\36\1\3"+
    "\1\37\1\40\4\3\1\41\1\42\1\3\1\43\1\44"+
    "\1\45\1\46\1\47\76\0\3\3\25\0\14\3\2\0"+
    "\22\3\6\0\1\50\1\51\25\0\14\51\2\0\22\51"+
    "\6\0\2\5\25\0\14\5\2\0\22\5\5\0\1\52"+
    "\2\53\1\0\1\54\1\52\2\0\1\52\17\0\14\53"+
    "\2\0\22\53\13\0\3\7\2\0\1\7\62\0\2\5"+
    "\3\0\3\7\2\0\1\7\14\0\14\5\2\0\22\5"+
    "\16\0\1\55\100\0\1\56\75\0\1\57\75\0\1\57"+
    "\74\0\1\60\55\0\3\3\25\0\1\3\1\61\12\3"+
    "\2\0\7\3\1\62\12\3\5\0\3\3\25\0\14\3"+
    "\2\0\14\3\1\63\1\64\4\3\5\0\3\3\25\0"+
    "\10\3\1\65\3\3\2\0\1\3\1\66\20\3\5\0"+
    "\3\3\25\0\1\3\1\67\12\3\2\0\22\3\22\0"+
    "\1\56\1\0\1\70\55\0\3\3\25\0\10\3\1\71"+
    "\3\3\2\0\22\3\5\0\1\72\2\3\25\0\14\3"+
    "\2\0\22\3\5\0\3\3\25\0\2\3\1\73\11\3"+
    "\2\0\22\3\5\0\3\3\25\0\4\3\1\74\7\3"+
    "\2\0\22\3\5\0\3\3\25\0\2\3\1\75\11\3"+
    "\2\0\22\3\5\0\3\3\25\0\10\3\1\76\3\3"+
    "\2\0\22\3\5\0\3\3\25\0\10\3\1\77\3\3"+
    "\2\0\22\3\5\0\3\3\25\0\14\3\2\0\1\3"+
    "\1\100\20\3\75\0\1\101\5\0\2\5\25\0\14\5"+
    "\2\0\22\5\1\0\1\101\4\0\2\5\12\0\1\56"+
    "\12\0\14\5\2\0\22\5\6\0\1\102\75\0\1\51"+
    "\25\0\14\51\2\0\22\51\5\0\3\52\1\0\1\54"+
    "\1\52\2\0\1\52\17\0\14\52\2\0\22\52\4\0"+
    "\13\55\3\0\57\55\2\0\1\103\73\0\3\3\25\0"+
    "\2\3\1\104\11\3\2\0\22\3\5\0\3\3\25\0"+
    "\6\3\1\105\5\3\2\0\22\3\5\0\3\3\25\0"+
    "\14\3\2\0\15\3\1\106\4\3\5\0\3\3\25\0"+
    "\2\3\1\107\11\3\2\0\1\3\1\110\20\3\5\0"+
    "\3\3\25\0\11\3\1\111\2\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\5\3\1\112\14\3\5\0"+
    "\3\3\25\0\12\3\1\113\1\3\2\0\22\3\5\0"+
    "\3\3\25\0\12\3\1\114\1\3\2\0\1\3\1\115"+
    "\20\3\5\0\3\3\25\0\14\3\2\0\4\3\1\116"+
    "\15\3\5\0\3\3\25\0\10\3\1\117\3\3\2\0"+
    "\22\3\5\0\3\3\25\0\4\3\1\120\7\3\2\0"+
    "\22\3\5\0\3\3\25\0\14\3\2\0\5\3\1\121"+
    "\14\3\5\0\3\3\25\0\12\3\1\122\1\3\2\0"+
    "\22\3\5\0\3\3\25\0\14\3\2\0\5\3\1\123"+
    "\14\3\5\0\3\3\25\0\14\3\2\0\2\3\1\124"+
    "\17\3\6\0\1\125\74\0\1\103\20\0\1\126\52\0"+
    "\3\3\25\0\3\3\1\127\10\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\5\3\1\130\14\3\5\0"+
    "\3\3\25\0\10\3\1\131\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\4\3\1\132\15\3\5\0"+
    "\3\3\25\0\1\3\1\133\12\3\2\0\22\3\5\0"+
    "\3\3\25\0\12\3\1\134\1\3\2\0\22\3\5\0"+
    "\3\3\25\0\10\3\1\135\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\5\3\1\136\14\3\5\0"+
    "\3\3\25\0\14\3\2\0\2\3\1\137\17\3\5\0"+
    "\3\3\25\0\2\3\1\140\11\3\2\0\22\3\5\0"+
    "\3\3\25\0\1\3\1\141\12\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\2\3\1\142\17\3\5\0"+
    "\3\3\25\0\14\3\2\0\1\3\1\143\20\3\5\0"+
    "\3\3\25\0\10\3\1\144\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\2\3\1\145\11\3\2\0\14\3\1\146"+
    "\5\3\5\0\3\3\25\0\14\3\2\0\4\3\1\147"+
    "\15\3\6\0\1\150\73\0\3\3\25\0\2\3\1\151"+
    "\11\3\2\0\22\3\5\0\3\3\25\0\2\3\1\152"+
    "\11\3\2\0\22\3\5\0\3\3\25\0\14\3\2\0"+
    "\5\3\1\153\14\3\5\0\3\3\25\0\4\3\1\154"+
    "\7\3\2\0\22\3\5\0\3\3\25\0\14\3\2\0"+
    "\12\3\1\155\7\3\5\0\3\3\25\0\14\3\2\0"+
    "\1\3\1\156\20\3\5\0\3\3\25\0\4\3\1\157"+
    "\7\3\2\0\22\3\5\0\3\3\25\0\12\3\1\160"+
    "\1\3\2\0\22\3\5\0\1\161\2\3\25\0\14\3"+
    "\2\0\22\3\5\0\3\3\25\0\1\3\1\162\12\3"+
    "\2\0\22\3\5\0\3\3\25\0\14\3\2\0\20\3"+
    "\1\163\1\3\5\0\3\3\25\0\14\3\2\0\1\3"+
    "\1\164\20\3\5\0\3\3\25\0\4\3\1\165\7\3"+
    "\2\0\22\3\6\0\1\166\73\0\3\3\25\0\4\3"+
    "\1\167\7\3\2\0\22\3\5\0\3\3\25\0\14\3"+
    "\2\0\7\3\1\170\12\3\5\0\3\3\25\0\12\3"+
    "\1\171\1\3\2\0\22\3\5\0\3\3\25\0\14\3"+
    "\2\0\1\3\1\172\20\3\5\0\3\3\25\0\3\3"+
    "\1\173\10\3\2\0\22\3\5\0\3\3\25\0\14\3"+
    "\2\0\5\3\1\174\14\3\5\0\3\3\25\0\2\3"+
    "\1\175\11\3\2\0\14\3\1\176\5\3\5\0\3\3"+
    "\25\0\10\3\1\177\3\3\2\0\22\3\5\0\3\3"+
    "\25\0\2\3\1\200\11\3\2\0\22\3\5\0\3\3"+
    "\25\0\14\3\2\0\14\3\1\165\5\3\6\0\1\201"+
    "\73\0\1\202\2\3\25\0\14\3\2\0\22\3\5\0"+
    "\3\3\25\0\10\3\1\203\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\10\3\1\204\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\10\3\1\205\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\1\3\1\206\20\3\5\0"+
    "\3\3\25\0\14\3\2\0\12\3\1\207\7\3\5\0"+
    "\3\3\25\0\10\3\1\210\3\3\2\0\22\3\5\0"+
    "\3\3\25\0\14\3\2\0\5\3\1\211\14\3\5\0"+
    "\3\3\25\0\3\3\1\212\10\3\2\0\22\3\6\0"+
    "\1\213\73\0\3\3\25\0\5\3\1\214\6\3\2\0"+
    "\22\3\5\0\3\3\25\0\1\3\1\215\12\3\2\0"+
    "\22\3\5\0\3\3\25\0\14\3\2\0\14\3\1\216"+
    "\5\3\5\0\3\3\25\0\14\3\2\0\4\3\1\217"+
    "\15\3\5\0\3\3\25\0\14\3\2\0\13\3\1\220"+
    "\6\3\5\0\3\3\25\0\14\3\2\0\5\3\1\221"+
    "\14\3\5\0\3\3\25\0\14\3\2\0\1\3\1\222"+
    "\20\3\6\0\1\223\73\0\3\3\25\0\6\3\1\224"+
    "\5\3\2\0\22\3\5\0\3\3\25\0\3\3\1\225"+
    "\10\3\2\0\22\3\5\0\3\3\25\0\10\3\1\226"+
    "\3\3\2\0\22\3\5\0\3\3\25\0\14\3\2\0"+
    "\5\3\1\227\14\3\6\0\1\230\73\0\3\3\25\0"+
    "\6\3\1\231\5\3\2\0\22\3\5\0\3\3\25\0"+
    "\2\3\1\232\11\3\2\0\22\3\5\0\3\3\25\0"+
    "\14\3\2\0\5\3\1\233\14\3\5\0\3\3\25\0"+
    "\14\3\2\0\10\3\1\234\11\3\6\0\1\235\73\0"+
    "\3\3\25\0\14\3\2\0\1\3\1\236\20\3\5\0"+
    "\3\3\25\0\14\3\2\0\1\3\1\237\20\3\6\0"+
    "\1\240\73\0\3\3\25\0\12\3\1\241\1\3\2\0"+
    "\22\3\6\0\1\242\73\0\3\3\25\0\10\3\1\243"+
    "\3\3\2\0\22\3\6\0\1\244\73\0\3\3\25\0"+
    "\14\3\2\0\5\3\1\245\14\3\6\0\1\246\73\0"+
    "\3\3\25\0\2\3\1\247\11\3\2\0\22\3\6\0"+
    "\1\250\73\0\3\3\25\0\14\3\2\0\1\3\1\251"+
    "\20\3\6\0\1\252\74\0\1\253\74\0\1\254\74\0"+
    "\1\255\74\0\1\256\74\0\1\257\74\0\1\260\74\0"+
    "\1\261\74\0\1\262\74\0\1\263\74\0\1\264\74\0"+
    "\1\265\74\0\1\266\74\0\1\267\74\0\1\270\74\0"+
    "\1\271\72\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9089];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\3\1\1\11\1\1\6\11"+
    "\5\1\1\11\14\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\2\11\1\0\7\1\1\11\10\1\1\11\2\0"+
    "\21\1\1\0\1\11\21\1\1\0\15\1\1\0\12\1"+
    "\1\0\11\1\1\0\7\1\1\0\4\1\1\0\4\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\17\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2904) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 45: break;
          case 2: 
            { lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 46: break;
          case 3: 
            { lexeme=yytext(); return Numero;
            } 
            // fall through
          case 47: break;
          case 4: 
            { lexeme=yytext(); return Identificador_error;
            } 
            // fall through
          case 48: break;
          case 5: 
            { lexeme=yytext(); return Comillas;
            } 
            // fall through
          case 49: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 50: break;
          case 7: 
            { lexeme=yytext(); return Division;
            } 
            // fall through
          case 51: break;
          case 8: 
            { return Linea;
            } 
            // fall through
          case 52: break;
          case 9: 
            { lexeme=yytext(); return Igual;
            } 
            // fall through
          case 53: break;
          case 10: 
            { lexeme=yytext(); return Suma;
            } 
            // fall through
          case 54: break;
          case 11: 
            { lexeme=yytext(); return Resta;
            } 
            // fall through
          case 55: break;
          case 12: 
            { lexeme=yytext(); return Multiplicacion;
            } 
            // fall through
          case 56: break;
          case 13: 
            { lexeme=yytext(); return Parentesis_a;
            } 
            // fall through
          case 57: break;
          case 14: 
            { lexeme=yytext(); return Parentesis_c;
            } 
            // fall through
          case 58: break;
          case 15: 
            { lexeme=yytext(); return Llave_a;
            } 
            // fall through
          case 59: break;
          case 16: 
            { lexeme=yytext(); return Llave_c;
            } 
            // fall through
          case 60: break;
          case 17: 
            { lexeme = yytext(); return Corchete_a;
            } 
            // fall through
          case 61: break;
          case 18: 
            { lexeme = yytext(); return Corchete_c;
            } 
            // fall through
          case 62: break;
          case 19: 
            { lexeme=yytext(); return P_coma;
            } 
            // fall through
          case 63: break;
          case 20: 
            { lexeme = yytext(); return operadorRelacional ;
            } 
            // fall through
          case 64: break;
          case 21: 
            { lexeme=yytext(); return punto;
            } 
            // fall through
          case 65: break;
          case 22: 
            { lexeme=yytext(); return operadorLogico;
            } 
            // fall through
          case 66: break;
          case 23: 
            { lexeme=yytext(); return caracter;
            } 
            // fall through
          case 67: break;
          case 24: 
            { lexeme = yytext(); return operadorIncrementoDecremento;
            } 
            // fall through
          case 68: break;
          case 25: 
            { lexeme=yytext(); return asignacion;
            } 
            // fall through
          case 69: break;
          case 26: 
            { lexeme=yytext(); return Ent;
            } 
            // fall through
          case 70: break;
          case 27: 
            { lexeme=yytext(); return Text;
            } 
            // fall through
          case 71: break;
          case 28: 
            { lexeme=yytext(); return Real;
            } 
            // fall through
          case 72: break;
          case 29: 
            { lexeme=yytext(); return Y_si;
            } 
            // fall through
          case 73: break;
          case 30: 
            { lexeme=yytext(); return Bool;
            } 
            // fall through
          case 74: break;
          case 31: 
            { lexeme=yytext(); return Aviso;
            } 
            // fall through
          case 75: break;
          case 32: 
            { lexeme=yytext(); return Tarea;
            } 
            // fall through
          case 76: break;
          case 33: 
            { lexeme=yytext(); return operadorBooleano;
            } 
            // fall through
          case 77: break;
          case 34: 
            { lexeme=yytext(); return Avanza;
            } 
            // fall through
          case 78: break;
          case 35: 
            { lexeme=yytext(); return Imprime;
            } 
            // fall through
          case 79: break;
          case 36: 
            { lexeme=yytext(); return Detener;
            } 
            // fall through
          case 80: break;
          case 37: 
            { lexeme=yytext(); return Mientras;
            } 
            // fall through
          case 81: break;
          case 38: 
            { lexeme=yytext(); return Gira_izq;
            } 
            // fall through
          case 82: break;
          case 39: 
            { lexeme=yytext(); return Gira_der;
            } 
            // fall through
          case 83: break;
          case 40: 
            { lexeme=yytext(); return Inicio_App;
            } 
            // fall through
          case 84: break;
          case 41: 
            { lexeme=yytext(); return Retroceder;
            } 
            // fall through
          case 85: break;
          case 42: 
            { lexeme=yytext(); return Advertencia;
            } 
            // fall through
          case 86: break;
          case 43: 
            { lexeme=yytext(); return VerificarBateria;
            } 
            // fall through
          case 87: break;
          case 44: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

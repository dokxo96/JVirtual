package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal String 
    Identificador                   ,
    Numero                          ,
    operadorBooleano                ,
    operadorIncrementoDecremento    ,
    operadorLogico                  ,
    operadorRelacional            
;


terminal
    Linea                         ,
    Comillas                      , 
    Igual                         , 
    Suma                          , 
    Resta                         , 
    Multiplicacion                , 
    Division                      , 
    Parentesis_a                  ,
    Parentesis_c                  ,  
    Llave_a                       , 
    Llave_c                       , 
    Corchete_a                    , 
    Corchete_c                    , 
    P_coma                        , 
    ERROR                         , 
    Inicio_App                    , 
    Ent                           ,
    Text                          ,     
    asignacion                    , 
    punto                         , 
    Real                          , 
    Bool                          ,             
    Car                           ,  
    Tarea                         , 
    Y_si                          , 
    Mientras                      , 
    Imprime                       ,  
    Gira_izq                      ,
    Gira_der                      ,   
    Avanza                        ,     
    Retroceder                    ,
    Detener                       ,
    Aviso                         ,
    Advertencia                   ,
    VerificarBateria    
;
non terminal 
        INICIO, 
        SENTENCIA, 
        DECLARACION, 
        IF, 
        SENTENCIA_BOOLEANA, 
        TAREA, 
        MIENTRAS, 
        IMPRIME,

        SENTENCIA_GIRA_IZQ,
        SENTENCIA_GIRA_DER,
        SENTENCIA_AVANZA,
        SENTENCIA_RETROCEDE,
        SENTENCIA_DETENER,
        SENTENCIA_AVISO,
        SENTENCIA_ADVERTENCIA,
        SENTENCIA_VERIFICA_BATERIA           
;



start with INICIO;


INICIO ::= 
    Inicio_App Identificador Llave_a Llave_c     
    |
    Inicio_App Identificador Llave_a SENTENCIA Llave_c
    |
    Inicio_App 
    {:  
    StyledDocument doc =Gramaticas.GramargetStyledDocument();
        Style style = compilador.txtgramaticas.addStyle("HidroCar", null);
        StyleConstants.setForeground(style, Color.black);

        try { doc.insertString(doc.getLength(),"linea"+(nleft+1)+"INICIO= HidroCar ID    ",style); }
        catch (BadLocationException e){}
        StyleConstants.setForeground(style, Color.red);

        try { doc.insertString(doc.getLength(), "  LLAVEIZQ cuerpo LLAVEDER \n ",style); }
        catch (BadLocationException e){}
        StyleConstants.setForeground(style, Color.BLACK);
    Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba un identificador "); :}
    |
    Inicio_App Identificador 
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_a "); :}
    |
    Inicio_App Identificador Llave_a 
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Falta se esperaba uns Llave_c "); :}
    |
     Identificador Llave_a Llave_c
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera la palabra de Inicio_App antes "); :}
    |
    Inicio_App  Llave_a Llave_c   
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba identificador entre Inicio_App y Llave_c "); :}
    |
    Inicio_App Identificador  Llave_c  
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se esperaba Llave_a entre Indentificador y Llave_c "); :}
    |
     Llave_a Llave_c
    {:Vista.setError("Error Sintactico : en la linea "+(start_valright+1)+", fila "+(start_valleft+1)+" Se espera = 'Inicio_App Identificador' antes "); :}

;


SENTENCIA ::= 
    SENTENCIA DECLARACION 
    |
    DECLARACION 
    |
    SENTENCIA IF 
    | 
    IF 
    |      
    SENTENCIA TAREA
    |
    TAREA
    |
    SENTENCIA MIENTRAS
    |
    MIENTRAS
    |
    SENTENCIA IMPRIME
    |
    IMPRIME
    |
    SENTENCIA SENTENCIA_GIRA_IZQ 
    |
    SENTENCIA_GIRA_IZQ 
    |   
    SENTENCIA SENTENCIA_GIRA_DER
    |   
    SENTENCIA_GIRA_DER
    |
    SENTENCIA SENTENCIA_AVANZA
    |
    SENTENCIA_AVANZA
    |
    SENTENCIA SENTENCIA_RETROCEDE
    |
    SENTENCIA_RETROCEDE
    |
    SENTENCIA SENTENCIA_DETENER
    |
    SENTENCIA_DETENER
    |
    SENTENCIA SENTENCIA_AVISO
    |
    SENTENCIA_AVISO
    |
    SENTENCIA SENTENCIA_ADVERTENCIA
    |
    SENTENCIA_ADVERTENCIA
    |
    SENTENCIA SENTENCIA_VERIFICA_BATERIA
    |
    SENTENCIA_VERIFICA_BATERIA

;


DECLARACION ::= 
    Text Identificador:id P_coma  
    {:Generador.gc(Generador.DECLARACION,"String",null,id);:}
    |
    Text Identificador:id asignacion Comillas Comillas P_coma   
    {:Generador.gc(Generador.DECLARACION,"String", null, id);:}
    |
    Text Identificador:id asignacion Comillas Identificador:text Comillas P_coma   
    {:Generador.gc(Generador.ASIGNACION,"String",id,text);:}
    |


    Ent Identificador:id P_coma
    {:Generador.gc(Generador.DECLARACION,"int",null,id);:}
    |
    Ent Identificador:id asignacion Numero:numero P_coma
    {:Generador.gc(Generador.ASIGNACION,"int",id,numero);:}
    |
    Ent Identificador:id operadorIncrementoDecremento:operadorIncDec P_coma
    {:Generador.gc(Generador.ASIGNACION,"int",id,operadorIncDec);:}    
    |


    Real Identificador:id asignacion Numero:Numero1 punto Numero:Numero2 P_coma 
    {:Generador.gc(Generador.ASIGNACION,"float",Numero1+"."+Numero2,id);:}
    |
    Real Identificador:id P_coma
    {:Generador.gc(Generador.DECLARACION,"float",null,id);:}
    |


    Bool Identificador:id P_coma
    {:Generador.gc(Generador.DECLARACION,"boolean",null,id);:}
    |
    Bool Identificador:id asignacion operadorBooleano:operador P_coma
    {:Generador.gc(Generador.ASIGNACION,"boolean",operador,id);:}
    |


    Car Identificador:id P_coma
    {:Generador.gc(Generador.DECLARACION,"char",null,id);:}
    |
    Car Identificador:id asignacion Comillas Identificador:caracter Comillas P_coma
    {:Generador.gc(Generador.ASIGNACION,"char",caracter,id);:}
    |
    Car Identificador:id asignacion Comillas Comillas P_coma
    {:Generador.gc(Generador.DECLARACION,"char",null,id);:}
;


IF ::=
    Y_si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;


MIENTRAS ::=
	Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;	


TAREA::=
    Tarea Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_BOOLEANA ::= 
    	operadorBooleano:operador      //verdad -- Falso
	|
	Identificador:id operadorLogico:operadorLogico   //i&& -- i|| -- i!     
	|
	Identificador:id operadorRelacional:operadorRelacional Numero:numero    // id > 5
        {:Generador.gc(Generador.DeclaracionBool,id,operadorRelacional,numero);:}
	|
	Identificador:id1 operadorRelacional:operadorRelacional Identificador:id2   //id2 > id2
        |
        Numero:numero operadorRelacional:operadorRelacional Identificador:id    //5<i
;
{arg1,arg2,res}

IMPRIME ::=
    Imprime Parentesis_a Parentesis_c P_coma
    |
    Imprime Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma
;


SENTENCIA_GIRA_IZQ ::=
    Gira_izq Parentesis_a Numero Parentesis_c P_coma
;


SENTENCIA_GIRA_DER ::=
    Gira_der Parentesis_a Numero Parentesis_c P_coma
;


SENTENCIA_AVANZA ::=
    Avanza Parentesis_a Numero Parentesis_c P_coma
;


SENTENCIA_RETROCEDE ::=
    Retroceder Parentesis_a Numero Parentesis_c P_coma
;


SENTENCIA_DETENER ::=
    Detener Parentesis_a Parentesis_c P_coma
;


SENTENCIA_AVISO ::=
    Aviso Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma
;


SENTENCIA_ADVERTENCIA ::=
    Advertencia Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma
;


SENTENCIA_VERIFICA_BATERIA ::=
    VerificarBateria Parentesis_a Parentesis_c P_coma
;